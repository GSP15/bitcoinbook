[[ch05_wallets]]
== Wallets

((("wallets", "defined")))在比特币中，“钱包”一次用来描述几种不同的东西。

从比较高的角度来说，钱包是一种主要服务于用户接口的应用程序。钱包控制着用户资金的访问权，管理密钥和地址，跟踪余额，并且创建与签署交易。

更狭义地说，从一个程序员的角度讲，“钱包”一词指的是用于存储和管理用户密钥的数据结构。

在这一章中，我们将关注第二个含义，也就是钱包是私钥的容器，通常以结构化的文件和简单的数据库来实现。

=== Wallet Technology Overview

这一节中我们概括地说一下用来构建用户友好的、安全的、而且灵活的比特币钱包的各种技术。

((("wallets", "contents of")))一个对比特币的常见误解是比特币钱包含有比特币。实质上，钱包仅含有密钥。而“币”被记录在比特币网络上的区块链上。用户通过使用他们钱包中的密钥签署交易来控制网络中的币。((("keychains")))在这种意义上，比特币钱包是一个 _钥匙链_。

[TIP]
====
比特币钱包包含密钥，不是币。每个用户都拥有包含密钥的钱包。钱包实际上是含有私钥/公钥对的钥匙链(see <<private_public_keys>>)。用户使用密钥签署交易，以此证明他们拥有交易输出（它们的币）。币以交易输出的形式被存储在区块链上（通常被记为 vout 或 txout）。
====

((("wallets", "types of", "primary distinctions")))主要有两种类型的钱包，通过它们含有的密钥是否相互关联来区分。

((("JBOK wallets", seealso="wallets")))((("wallets", "types of", "JBOK wallets")))((("nondeterministic wallets", seealso="wallets")))第一种类型是 _非确定性钱包_，它的每一个密钥都是从一个随机数中独立生成的。密钥没有相互关联。这种类型的钱包也被称为 JBOK 钱包 —— 源自短语“Just a Bunch Of Keys”。

((("deterministic wallets", seealso="wallets")))第二种类型的钱包是 _确定性钱包_，它所有的密钥都是从一个单独的主密钥 —— 也称为 _种子_ —— 衍生出来的。在这种钱包中的所有密钥都是相互关联的，而且如果某人拥有原始的种子的话就可以再次生成。((("key derivation methods")))有好几种不同的 _密钥抽取_ 方法用于确定性钱包中。((("hierarchical deterministic (HD) wallets", seealso="wallets")))最常用的抽取方法使用一种树形结构，也被称为 _分层确定性_ 或 _HD_ 钱包。

((("mnemonic code words")))确定性钱包是由一个种子初始化的。为了使这些种子易于使用，它们经常被编码为英语单词，也称为 _助记码单词_。

接下来的几节从一个比较高的角度介绍每一种技术。

[[random_wallet]]
==== Nondeterministic (Random) Wallets

((("wallets", "types of", "nondeterministic (random) wallets")))在第一种比特币钱包（现在称为 Bitcoin Core）中，钱包是一个随机生成的私钥的集合。例如，原始的 Bitcoin Core 客户端在第一次启动时预生成了 100 个随机私钥，并随着需要生成了更多密钥，每个只使用一次。这样的钱包正在被确定性钱包所取代，因为它们对于管理、备份、和导入来说十分麻烦。随机密钥的缺点是，如果你生成了许多，那么你就必须持有它们所有的拷贝，这意味着钱包就必须频繁备份。每个密钥都必须备份，否则在钱包变得无法访问时，其控制的资金就会不可挽回地丢失。这与每个比特币地址仅用于一笔交易来避免地址重用的原则直接冲突。地址重用会因将多笔交易与地址进行相互关联而削弱隐私性。Type-0 非确定性钱包不是一个好的选择，特别是在你想要避免地址冲用的情况下，因为它意味着管理许多密钥，这造成了频繁备份的需求。虽然 Bitcoin Core 包含了 Type-0 钱包，但是 Bitcoin Core 开发者不鼓励使用这种钱包。<<Type0_wallet>>展示了一个非确定性钱包，它含有一个随机密钥的松散集合。

[TIP]
====
除了简单的测试意外，非确定性钱包对任何用途都不鼓励使用。它们备份和用起来实在是太麻烦。取而代之，可以使用基于行业标准的带有用于备份的 _助记_ 种子 的 _HD 钱包_。
====

[[Type0_wallet]]
[role="smallersixty"]
.Type-0 nondeterministic (random) wallet: a collection of randomly generated keys
image::images/mbc2_0501.png["Non-Deterministic Wallet"]

==== Deterministic (Seeded) Wallets

((("wallets", "types of", "deterministic (seeded) wallets")))确定性的，或者“带种子的”钱包包含的私钥是通过一种单向哈希函数从一个共通的种子中抽取出来的。这个种子是一个随机生成的数字，结合着其他的数据，比如索引编号或者“链码”（参见<<hd_wallets>>）来派生出私钥。在确定性钱包中，种子就可以恢复所有的派生密钥，因此在创建时备份一次就够了。种子对钱包的导入导出也是足够的，允许所有的用户密钥在不同的钱包实现之间简单地迁移。<<Type1_wallet>>展示了确定性钱包的逻辑图。

[[Type1_wallet]]
[role="smallersixty"]
.Type-1 deterministic (seeded) wallet: a deterministic sequence of keys derived from a seed
image::images/mbc2_0502.png["Deterministic Wallet"]

[[hd_wallets]]
==== HD Wallets (BIP-32/BIP-44)

((("wallets", "types of", "hierarchical deterministic (HD) wallets")))((("hierarchical deterministic (HD) wallets")))((("bitcoin improvement proposals", "Hierarchical Deterministic Wallets (BIP-32/BIP-44)")))确定性钱包是为了使许多密钥从一个单独的“种子”中简单地派生出来而开发的。确定性钱包的最先进形态是由 BIP-32 标准定义的 HD 钱包。HD 钱包含有以一个树形结构派生出的密钥，如此父密钥可以派生出一系列子密钥，它们又可以派生粗一系列孙子密钥，如此反复，直至无限深度。<<Type2_wallet>>展示了这种树形结构。

[[Type2_wallet]]
.Type-2 HD wallet: a tree of keys generated from a single seed
image::images/mbc2_0503.png["HD wallet"]

HD 钱包比起随机（非确定性）密钥主要提供了两种好处。第一，这种树形结构可以用于表达额外的组织含义，比如一个子密钥的特定分支用来接收收入支付，而一个不同的分支用来接收支出支付的找零。密钥的分支还可以用于公司组织，将不同的分支分配给部门、子公司、特定的用途、或者不同种类的账户。

HD 钱包的第二个好处是，用户可以创建一系列公钥而不用访问相应的私钥。这允许 HD 钱包可以被用于不安全的服务器，或者在仅作为收款之用时，为每一笔交易发行一个不同的公钥。这些公钥不必提前加载或者派生出来，而且服务器也没有可以花费这些资金的私钥。

==== Seeds and Mnemonic Codes (BIP-39)

((("wallets", "technology of", "seeds and mnemonic codes")))((("mnemonic code words")))((("bitcoin improvement proposals", "Mnemonic Code Words (BIP-39)")))对于管理许多密钥和地址来说，HD 钱包是一种非常强大的机制。如果它们与创建种子的标准化方法相结合就更有用。这种标准化方法从一系列易于在钱包之间抄录、导出、和导入的英语单词中创建种子。这被称为 _助记码_ 并由 BIP-39 标准化。如今，大多数比特币钱包（以及其他加密货币的钱包）都使用这种标准，用可以互操作的助记码为备份和恢复进行导入和导出。

让我们从实践的角度看一看。下面哪一个种子易于抄录在纸上、读起来不易错、易于在导入导出到另一个钱包？

.A seed for an deterministic wallet, in hex
----
0C1E24E5917779D297E14D45F14E1A1A
----

.A seed for an deterministic wallet, from a 12-word mnemonic
----
army van defense carry jealous true 
garbage claim echo media make crunch
----

==== Wallet Best Practices

((("wallets", "best practices for")))((("bitcoin improvement proposals", "Multipurpose HD Wallet Structure (BIP-43)")))随着比特币钱包技术的成熟，某种共通的行业标准应运而生，它们使比特币钱包可以广泛地相互操作、易用、安全、而且灵活。这些共通标准是：

* 助记码单词，基于 BIP-39
* HD 钱包，基于 BIP-32
* 多用途 HD 钱包结构，基于 BIP-43
* 多币种和多账户钱包，基于 BIP-44

在未来的发展中这些标准可能会改变或者被废弃，但目前它们形成了一套紧密关联的、实际上成为了比特币标准的技术。

这些标准广泛地为比特币钱包的软件和硬件采用，使得这些钱包都是可以相互操作的。用户可以导出在其中一个钱包中生成的助记码，并将它导入到另一个钱包中，恢复所有的交易、密钥和地址。

((("hardware wallets")))((("hardware wallets", see="also wallets")))支持这些标准的软件钱包的一些例子包括 Breadwallet、Copay、Multibit HD、和 Mycelium。支持这些标准的硬件钱包的例子包括 Keepkey、Ledger、和 Trezor. 

接下来的章节中将详细地讲解这些技术的细节。

[TIP]
====
如果你在实现一个比特币钱包，那么它应当被构建为一个 HD 钱包，使用备份用的助记码种子，遵循 BIP-32、BIP-39、BIP-43、和 BIP-44 标准，就像后续章节中描述的那样。
====

==== Using a Bitcoin Wallet

((("wallets", "using bitcoin wallets")))在<<user-stories>>中我们介绍了 Gabriel，((("use cases", "web store", id="gabrielfive")))一位里约热内卢的年轻企业家，运营者一个简单的网店售卖比特币主题的T恤、咖啡杯、和贴纸。

((("wallets", "types of", "hardware wallets")))Gabriel 使用 Trezor 硬件型比特币钱包（<<a_trezor_device>>）来安全第管理他的比特币。Trezor 是一个简单的 USB 设备，带有存储密钥（以 HD 钱包的形式）和签署交易用的两个按钮。Trezor 钱包实现了本章中讨论过的所有行业标准，所以 Gabriel 不依赖于任何专利技术或者唯一的解决方案提供商。

[[a_trezor_device]]
.A Trezor device: a bitcoin HD wallet in hardware
image::images/mbc2_0504.png[alt]

当 Gabriel 第一次使用 Trezor 时，这个设备会从内建的硬件随机数生成器中生成一个助记码和一个种子。在初始化期间，钱包会显示一系列编号的单词，在屏幕上一个接一个地显示（参见 <<trezor_mnemonic_display>>）。

[[trezor_mnemonic_display]]
.Trezor displaying one of the mnemonic words
image::images/mbc2_0505.png["Trezor wallet display of mnemonic word"]

通过记下这些助记码，<<trezor_mnemonic_display>> 创建了一个可以在 Trezor 设备丢失或损坏的情况下用于恢复的备份。这个助记码可以用来在一个新的 Trezor 或者任何兼容的软硬件钱包中进行恢复。注意单词的顺序是重要的，所以助记码的纸张备份中对每个单词都有编号的位置。Gabriel 必须小心地在编号的位置上记录每个单词来保证正确的顺序。

[[mnemonic_paper_backup]]
.Gabriel's paper backup of the mnemonic
[cols="<1,^50,<1,^50", width="80%"]
|===
|*1.*| _army_ |*7.*| _garbage_
|*2.*| _van_ |*8.*| _claim_
|*3.*| _defense_ |*9.*| _echo_
|*4.*| _carry_ |*10.*| _media_
|*5.*| _jealous_ |*11.*| _make_
|*6.*| _true_ |*12.*| _crunch_
|===

[NOTE]
====
<<mnemonic_paper_backup>>中展示的 12 词助记码是为了简单。事实上，大多数硬件钱包会生成更安全的 24 词助记码。助记码的用法是完全一样的，与长度无关。
====

在 Gabriel 的网店的第一个版本中，他使用了在 Trezor 设备上生成的一个单独的比特币地址。这个单独的地址被所有的客户在所有的订单中使用。正如我们将会看到的，这种方式有一些缺陷，但可以用一个 HD 钱包来改进。((("", startref="gabrielfive")))

=== Wallet Technology Details

现在让我们详细讲解每一个用于许多比特币钱包中的行业标准。

[[mnemonic_code_words]]
==== Mnemonic Code Words (BIP-39)

((("wallets", "technology of", "mnemonic code words")))((("mnemonic code words", id="mnemonic05")))((("bitcoin improvement proposals", "Mnemonic Code Words (BIP-39)", id="BIP3905")))助记码单词是一个单词序列，它表示（编码着）一个用作种子的随机数，来派生一个确定性钱包。这个单词序列可以重建这个种子，并从中重建钱包和所有的派生密钥。一个实现了使用助记码的确定性钱包的钱包应用，会在首次创建钱包时向用户显示 12 到 24 个单词。这个单词的序列就是备份，并可以用于在相同或任何兼容的钱包应用中恢复和重建所有的密钥。助记单词使用户很容易地备份钱包，因为与一个随机的数字序列相比它们易于阅读和正确抄录。

[TIP]
====
((("brainwallets")))助记单词常与“大脑钱包”相混淆。它们不是同一个东西。主要的区别是，大脑钱包是由用户选择的单词组成的，而助记单词使由钱包随机创建并显示给用户的。这个重要的区别使得助记单词要安全得多，因为人是一种非常差劲儿的随机源。
====

助记码被定义在 BIP-39 中（参见<<appdxbitcoinimpproposals>>）。注意，BIP-39 是助记码标准的实现之一。((("Electrum wallet", seealso="wallets")))先于 BIP-39 还存在一种不同的标准，使用一组不同的单词，用于 Electrum 钱包。 BIP-39 是由 Trezor 硬件钱包背后的公司提倡的，而且与 Electrum 的实现不兼容。但是，现在 BIP-39 获得了广泛的行业支持，拥有几十种可以互换的事件，因此应当被认识是实质上的行业标准。

BIP-39 定义了助记码和种子的创建，我们在这里将之描述为九个步骤。为了清楚，这个处理被分为两个部分：<<generating_mnemonic_words>>中展示的第一步到第六步，以及<<mnemonic_to_seed>>中展示的第七步到第九步。

[[generating_mnemonic_words]]
===== Generating mnemonic words

助记单词是由钱包使用在 BIP-39 中定义的标准化过程自动生成的。钱包从一个熵源开始，添加一个校验和，然后将这个熵映射到一个单词列表：

1. 创建一个 128 到 256 比特的随机序列（熵）。
2. 取这个随机序列的 SHA256 哈希的前（熵的长度/32）比特作为校验和。
3. 将校验和添加到随机序列的末尾。
4. 将这个序列分割为 11 比特的区间。
5. 将每个 11 比特的值映射到一个单词 —— 在一个预定义好的 2048 个单词的字典中。
6. 助记码就是单词的序列。

<<generating_entropy_and_encoding>>展示了如何用熵生成助记单词。

[[generating_entropy_and_encoding]]
[role="smallerseventy"]
.Generating entropy and encoding as mnemonic words
image::images/mbc2_0506.png["Generating entropy and encoding as mnemonic words"]

<<table_4-5>>展示了熵数据的大小，与助记码单词个数之间的关系。

[[table_4-5]]
.Mnemonic codes: entropy and word length
[options="header"]
|=======
|Entropy (bits) | Checksum (bits) | Entropy *+* checksum (bits) | Mnemonic length (words)
| 128 | 4 | 132 | 12
| 160 | 5 | 165 | 15
| 192 | 6 | 198 | 18
| 224 | 7 | 231 | 21
| 256 | 8 | 264 | 24
|=======

[[mnemonic_to_seed]]
===== From mnemonic to seed

((("key-stretching function")))((("PBKDF2 function")))助记单词表示一个长度为 128 到 256 比特的熵。然后通过使用密钥延展函数 PBKDF2，这个熵用来派生一个更长的种子。之后这个生成的种子就可以用来构建确定性钱包并派生它的密钥。

((("salts")))((("passphrases")))密钥延展函数接收两个参数：助记单词和一个 _salt_。在密钥延展函数中 salt 的用途是使得构建一个让暴力攻击成为可能的查找表变得困难。在 BIP-39 标准中，salt 有另外一个目的 —— 它允许引入一个密码，作为一个额外的安全因子来保护种子，正如我们将在 <<mnemonic_passphrase>> 中描述的那样。

在第七步到第九步中描述的处理是先前 <<generating_mnemonic_words>> 中描述的处理的延续：

++++
<ol start="7">
	<li>PBKDF2 密钥延展函数的第一个参数，是在第六步中生成的<em>助记码</em></li>
	<li>PBKDF2 密钥延展函数的第二个参数是一个 <em>salt</em>。salt 由一个字符串常量 “<code>mnemonic</code>” 与一个用户提供的密码字符拼接而成。</li>
	<li>PBKDF2 使用 HMAC-SHA512 算法对助记码和 salt 参数进行 2048 次哈希，产生一个 512 字节的值作为其最终结果。这个 512 字节的值就是种子。</li>
</ol>
++++

<<fig_5_7>> 展示了如何用助记码生成种子。

[[fig_5_7]]
.From mnemonic to seed
image::images/mbc2_0507.png["From mnemonic to seed"]

[TIP]
====
密钥延展函数，由于它的 2048 次哈希，可以非常有效地防护针对助记码或密码的暴击攻击。它使得尝试几千个密码和助记码组合的（计算上的）代价异常高昂，同时可能派生出的种子的数量非常巨大（2^512^）。
====

表格 pass:[<a data-type="xref" href="#mnemonic_128_no_pass" data-xrefstyle="select: labelnumber">#mnemonic_128_no_pass</a>]、pass:[<a data-type="xref" href="#mnemonic_128_w_pass" data-xrefstyle="select: labelnumber">#mnemonic_128_w_pass</a>]、和 pass:[<a data-type="xref" href="#mnemonic_256_no_pass" data-xrefstyle="select: labelnumber">#mnemonic_256_no_pass</a>] 展示了一些助记码和它们产生的种子的例子（没有任何密码）。

[[mnemonic_128_no_pass]]
.128-bit entropy mnemonic code, no passphrase, resulting seed
[cols="h,"]
|=======
| *Entropy input (128 bits)*| +0c1e24e5917779d297e14d45f14e1a1a+
| *Mnemonic (12 words)* | +army van defense carry jealous true garbage claim echo media make crunch+
| *Passphrase*| (none)
| *Seed  (512 bits)* | +5b56c417303faa3fcba7e57400e120a0ca83ec5a4fc9ffba757fbe63fbd77a89a1a3be4c67196f57c39+
+a88b76373733891bfaba16ed27a813ceed498804c0570+
|=======

[[mnemonic_128_w_pass]]
.128-bit entropy mnemonic code, with passphrase, resulting seed
[cols="h,"]
|=======
| *Entropy input (128 bits)*| +0c1e24e5917779d297e14d45f14e1a1a+
| *Mnemonic (12 words)* | +army van defense carry jealous true garbage claim echo media make crunch+
| *Passphrase*| SuperDuperSecret
| *Seed  (512 bits)* | +3b5df16df2157104cfdd22830162a5e170c0161653e3afe6c88defeefb0818c793dbb28ab3ab091897d0+
+715861dc8a18358f80b79d49acf64142ae57037d1d54+
|=======


[[mnemonic_256_no_pass]]
.256-bit entropy mnemonic code, no passphrase, resulting seed
[cols="h,"]
|=======
| *Entropy input (256 bits)* | +2041546864449caff939d32d574753fe684d3c947c3346713dd8423e74abcf8c+
| *Mnemonic (24 words)* | +cake apple borrow silk endorse fitness top denial coil riot stay wolf 
luggage oxygen faint major edit measure invite love trap field dilemma oblige+
| *Passphrase*| (none)
| *Seed (512 bits)* | +3269bce2674acbd188d4f120072b13b088a0ecf87c6e4cae41657a0bb78f5315b33b3a04356e53d062e5+
+5f1e0deaa082df8d487381379df848a6ad7e98798404+
|=======

[[mnemonic_passphrase]]
===== Optional passphrase in BIP-39

((("passphrases")))BIP-39 标准允许在种子的派生中使用一个可选的密码。如果没有使用密码，助记码就会与一个由字符串常量 +"mnemonic"+ 一起被延展，从任意已知的助记码中产生一个特定的 512 比特的种子。如果使用了密码，延展函数就会为同一个助记码产生一个 _不同_ 的种子。实际上，对于一个已知的助记码，每一个可能的密码都会导致一个不同的种子。实质上，不存在“错误”的密码。所有密码都是有效的，而且它们都导致不同的种子，这形成了巨大的、可能存在的未初始化的钱包集合。这个可能存在的钱包集合是如此巨大（2^512^），以至于暴力攻击或偶然猜中一个正在使用中的钱包没有实际的可能性。

[TIP]
====
在 BIP-39 中没有“错误”的密码。每个密码都指向某个钱包，这个钱包除非之前用过否则就是空的。
====

可选的密码创造了两个重要的特性：

* 一个第二因子（某些被记忆的东西），它使得一个助记码本身没有任何用处，防止助记码备份被窃贼盗走。

* 一种形式的合理性推诿，或者“胁迫钱包”，一个被选好的密码指向一个含有少量资金的钱包，这个钱包用来将分击者的注意力从包含主要资金的“真正”钱包上分散开来。

然而，重要的是要知道使用密码也引入了丢失的风险：

* 如果钱包的所有者丧失行为能力或者死亡，而且没有其他人知道密码，那么种子就是无用的而且在钱包中存储的所有资金就永远丢失了。

* 相反，如果所有者在和种子相同的地方备份了密码，那么就削弱了第二因子的用途。

虽然密码非常有用，它们应当仅与仔细规划过的备份与恢复策略组合使用，考虑所有者生还的可能性，并允许他或她的家人恢复加密货币资产。

===== Working with mnemonic codes

BIP-39 被许多不同的语言作为库进行了实现：

https://github.com/trezor/python-mnemonic[python-mnemonic]:: 提出 BIP-39 的 SatoshiLabs 团队对此标准的参考实现，使用 Python 语言

https://github.com/bitcoinjs/bip39[bitcoinjs/bip39]:: 一个 BIP-39 的实现，作为流行的 bitcoinJS 框架的一部分，使用 JavaScript 

https://github.com/libbitcoin/libbitcoin/blob/master/src/wallet/mnemonic.cpp[libbitcoin/mnemonic]:: 一个 BIP-39 实现，作为流行的 Libbitcoin 框架的一部分 使用 pass:[<span class="keep-together">C++</span>]

还有一个作为独立网页实现的 BIP-39 实现，它对测试和试验及其有用。<<a_bip39_generator_as_a_standalone_web_page>> 展示了一个可以生成助记码、种子、和延展私钥的独立网页

[[a_bip39_generator_as_a_standalone_web_page]]
.A BIP-39 generator as a standalone web page
image::images/mbc2_0508.png["BIP-39 generator web-page"]

((("", startref="mnemonic05")))((("", startref="BIP3905")))这个网页可以在浏览器中离线使用，或者 https://dcpos.github.io/bip39/[accessed online].

==== Creating an HD Wallet from the Seed

((("wallets", "technology of", "creating HD wallets from root seed")))((("root seeds")))((("hierarchical deterministic (HD) wallets")))HD 钱包从一个单独的 _根种子_ 创建，它是一个 128、256、或 512 比特的随机数。最常见的是，这个种子是从一个前一节中详细介绍的 _助记码_ 中生成的。

HD 钱包中的每一个密钥都是从这个跟种子中确定性地衍生出来的，这使得在任何兼容的 HD 钱包中从这个种子重建整个钱包称为可能。使得包含数千甚至数百万密钥的钱包可以很容易地通过仅传送衍生出这个种子的助记码，就可以很容易地备份、恢复、导出、和导入。

<<HDWalletFromSeed>>展示了 HD 钱包创建主密钥和主链码的过程。

[[HDWalletFromSeed]]
.Creating master keys and chain code from a root seed
image::images/mbc2_0509.png["HDWalletFromRootSeed"]

根种子输入到 HMAC-SHA512 算法中并得到一个用来创建 _主私钥_（m）和 _主链码_（c）的哈希。

之后，主私钥（m）使用我们在<<pubkey>>中看到的普通椭圆曲线乘法处理 +m * G+ 生成一个相应的主公钥（M）。

链码（c）用于在从父密钥中创建子密钥的函数中引入熵，正如我们将在下一节中看到的那样。

===== Private child key derivation

((("child key derivation (CKD)")))((("public and private keys", "child key derivation (CKD)")))HD 钱包使用 _子密钥派生_（CKD）函数来从父密钥中派生子密钥。

子密钥派生函数基于组合了如下要素的单向哈希函数：

* 一个父私钥或父公钥（ECDSA 未压缩密钥）
* 一个称为链码的种子（256 比特）
* 一个索引号码（32 比特）

链码用来向这个处理引入确定性的随机数据，所以知道索引和子密钥不足以衍生出其他子密钥。知道一个子密钥也无法找出它的兄弟密钥，除非你还拥有链码。最初的链码种子（在树的根部）是从种子中生成的，而后续的子链码是从每个父链码中派生出来的。

这三个项目（父密钥、链码、和索引）被组合并哈希来生成子密钥，如下所述。

父公钥、链码、和索引号码被组合并使用 HMAC-SHA512 算法生成 512 比特的哈希。这个 512 比特的哈希被分割为 256 比特的两半。这个哈希的右侧 256 比特就是子节点的链码。哈希左侧的 256 比特以及索引号码被加到父私钥来产生子私钥。在<<CKDpriv>>中我们看到索引被设置为 0 来产生父密钥的第 “零个”（索引的第一个）子密钥。

[[CKDpriv]]
.Extending a parent private key to create a child private key
image::images/mbc2_0510.png["ChildPrivateDerivation"]

改变索引允许我们扩展父钥并创建连续的其他子钥，例如，子钥 0、子钥 1、子钥 2 等等。每一个父钥都可以拥有 2,147,483,647（2^31^）个子钥（2^31^ 是整个可用范围 2^32^ 的一半，因为另一半是为一种特殊类型的派生而保留的，我们将在本章稍后讨论它）。

在树的下一层重复这个处理，每个子钥都可以成为一个父钥并创建它自己的子钥，如此延续无限多代。

===== Using derived child keys

子私钥与不确定性（随机）密钥是不可区分的。因为派生函数是一个单向函数，子钥不能被用来找出父钥。子钥也不能用来找出任何兄弟密钥。如果你有第 n 个子钥，你是无法找到它的兄弟密钥的，比如第 n-1 个子钥或 n+1 个子钥，或者在序列上的任何一个子钥。只有父钥和链码可以派生出所有的子钥。没有子链码，子钥也不能用来派生任何孙子钥。你需要子私钥和子链码两者才能开始一个新的分支并派生孙子钥。

那么子私钥自身可以用来做什么？它可以用来生成公钥和比特币地址。然后，它可以用来签署交易来花费任何支付给这个地址的资金。

[TIP]
====
子私钥，相应的公钥，以及比特币地址都无法与随机创建的密钥和地址区分。它们是一个序列的一部分这一事实，在创建它们的 HD 钱包函数之外是不可见的。一旦被创建，它们就会与“普通的”密钥一模一样地工作。
====

===== Extended keys

((("public and private keys", "extended keys")))((("extended keys")))正如我们先前看到的，密钥派生函数可以用来在树的任意一层上创建子钥，基于三个输入：一个密钥，一个链码，和所期望的子钥的索引。两个实质上的元素是密钥和链码，它们的组合被称为 _扩展密钥_。“扩展密钥”一次也可以被认为是“可扩展的密钥”，因为这样的密钥可以用来派生子钥。

扩展密钥简单地将 256 比特的密钥和 256 比特的链码连接为 512 比特的序列来存储和表示。存在两种类型的扩展密钥。扩展私钥是一个私钥与链码的组合，可以额用来派生子私钥（而从它们中派生子公钥）。扩展公钥是一个公钥与链码的组合，可以用来创建子公钥（_仅仅是公钥_），正如<<public_key_derivation>>中描述的那样。

可以认为一个扩展密钥是 HD 钱包的树形结构中一个分支的根。使用这个分支的根，你可以派生出分支的其余部分。扩展私钥可以创建出一个完整的分支，而扩展公钥 _仅_ 能够创建一个公钥的分支。

[TIP]
====
扩展密钥由一个私钥或公钥和链码组成。一个扩展密钥可以创建子钥，在树形结构中生成自己的分支。分享一个扩展密钥就是给出了整个分支的访问权。
==== 

扩展密钥使用 Base58Check 进行编码，以便于在 BI-32 兼容的钱包之间进行导出和导入。扩展密钥的 Base58Check 编码使用了一个特殊的版本号，它导致在用 Base58 字符进行编码得到“xprv”和“xpub”前缀，这使得它们很易于辨识。因为扩展密钥的长度是 512 或 513 比特，所以它也要比我们先前看到的其他 Base58Check 编码的字符串要长得多。

这里是一个扩展 _私钥_ 的例子，用 Base58Check 编码：

----
xprv9tyUQV64JT5qs3RSTJkXCWKMyUgoQp7F3hA1xzG6ZGu6u6Q9VMNjGr67Lctvy5P8oyaYAL9CAWrUE9i6GoNMKUga5biW6Hx4tws2six3b9c
----

这是相应的扩展 _公钥_，用 Base58Check 编码：

----
xpub67xpozcx8pe95XVuZLHXZeG6XWXHpGq6Qv5cmNfi7cS5mtjJ2tgypeQbBs2UAR6KECeeMVKZBPLrtJunSDMstweyLXhRgPxdp14sk9tJPW9
----

[[public__child_key_derivation]]
===== Public child key derivation

((("public and private keys", "public child key derivation")))就像我们早先提到过的，HD 钱包的一个非常有用的性质是在 _没有_ 私钥的情况下，从父公钥中派生子公钥的能力。这给了我们两种方式派生一个子公钥：要么从子私钥派生，要么从父公钥直接派生。

因此，一个扩展公钥可以用于在 HD 钱包树形结构的相应分支上派生所有的 _公钥_（而且仅是公钥）。

这个捷径可以用来创建非常安全的公钥部署 —— 服务器和应用程序拥有扩展公钥的拷贝而没有任何私钥。这种部署可以产生无限多的公钥和比特币地址，但是不能花费任何发送到这些地址上的资金。同时，在另一台更安全的服务器上，扩展私钥可以派生所有相应的私钥来签署交易和花费资金。

这种方案的一个常见应用是在一个电商应用的 web 服务器上安装一个扩展公钥。这个 web 服务器可以使用公钥派生函数来为每一笔交易（例如，为一个顾客的购物车）创建一个新的比特币地址。这个 web 服务器不会拥有任何易受窃贼攻击的私钥。没有 HD 钱包，这样做的唯一方式是在一台分离的安全服务器上生成数千个比特币地址，之后将它们预加载到电商服务器。这种方式很麻烦，而且需要持续地维护以保证电商服务器不会“用光”密钥。

((("cold storage")))((("storage", "cold storage")))((("hardware wallets")))这种方案的另一种常见应用是冷存储或硬件型钱包。在这种场景下，扩展私钥可以被存储在一个纸质钱包或硬件设备（比如 Trezor 硬件型钱包）上，而扩展公钥可以在线保存。用户可以随意创建“收款”地址，而私钥则安全地离线存储。要花费资金时，用户可以在一个离线比特币客户端使用扩展私钥签名，或者在硬件钱包设备上签署交易。<<CKDpub>>展示了这种扩展父公钥来派生子公钥的机制。

[[CKDpub]]
.Extending a parent public key to create a child public key
image::images/mbc2_0511.png["ChildPublicDerivation"]

==== Using an Extended Public Key on a Web Store

((("wallets", "technology of", "using extended public keys on web stores")))让我们继续 Gabriel 的网店的故事，来看看 HD 钱包是如何被使用的。((("use cases", "web store", id="gabrielfivetwo"))) 

Gabriel 处于兴趣首次建立了他自己的网店，基于一个简单的 Wordpress 托管网页。他的网店十分简单，只有几个页面和一个带有一个比特币地址的订单表单。

Gabriel 使用了他的 Trezor 设备生成的第一个比特币地址作为网店的主要比特币地址。如此，所有的收入支付都将支付到一个由 Trezor 硬件型钱包控制的地址上。

顾客会使用表单提交一个订单，并向 Gabriel 公布的比特币地址付款，触发一封带有订单详细的邮件给 Gabriel 处理。在每周仅有几笔订单的情况下，这个系统足够用了。

然而，这个小网店变得十分成功并吸引了当地社区的许多订单。很快，Gabriel 就被淹没了。所有的订单都支付给同一个地址，要正确匹配订单和交易变得十分困难，特别是在短时间内发生多个金额相同的订单时。

通过在不知晓私钥的情况下派生子公钥的能力，Gabriel 的 HD 钱包提供了一个好得多的方案。Gabriel 可以在它的网站上加载一个扩展公钥（xpub），它可以用来为每一个顾客订单派生一个唯一的地址。Gabriel 可以从他的 Trezor 花费资金，但是在网站上加载的 xpub 仅能够生成地址和接收资金。HD 钱包的这种特性是一个极好的安全特性。Gabriel 的网站不含任何私钥，因此不需要高度的安全性。

要导出 xpub，Gabriel 组合使用基于 web 的软件和 Trezor 硬件型钱包。为了导出公钥必须插入 Trezor 设备。注意硬件型钱包绝不会导出私钥 —— 它们总是留在设备内部。<<export_xpub>> 展示了 Gabriel 用来导出 xpub 的网页接口。

[[export_xpub]]
.Exporting an xpub from a Trezor hardware wallet
image::images/mbc2_0512.png["Exporting the xpub from the Trezor"]

Gabriel 拷贝 xpub 到他网店的比特币商店软件。他使用 _Mycelium Gear_，一个为各种网站托管和内容平台服务的开源的网店插件。Mycelium Gear 会使用这个 xpub 来为每一笔购买生成一个唯一的地址。((("", startref="gabrielfivetwo")))

===== Hardened child key derivation

((("public and private keys", "hardened child key derivation")))((("hardened derivation")))从一个 xpub 中派生出一个公钥分支的能力十分有用，但它也带来了潜在的风险。访问 xpub 不会交出子私钥的访问权。但是，因为 xpub 含有链码，如果一个子私钥被知道了，或者泄露了，那么它就可以用来和链码一起派生所有其他的子私钥。一个被泄露的子私钥，和一个父链码，会暴露所有的子密钥的所有私钥。更糟的是，子私钥和父链码可以用来推导父私钥。

为了应对这种风险，HD 钱包使用另一种称为 _硬化派生_ 的派生函数，它“打破”了父公钥和子链码之间的关系。硬化派生函数使用父私钥来派生子链码，而不是使用父公钥。这在父/子序列中建立了一道“防火墙” —— 一个不能用于暴露父私钥或兄弟私钥的链码。硬化派生函数看起来与普通的子私钥派生几乎一模一样，除了父私钥被用于哈希函数的输入，而不是父公钥，如图 <<CKDprime>> 所示。

[[CKDprime]]
.Hardened derivation of a child key; omits the parent public key
image::images/mbc2_0513.png["ChildHardPrivateDerivation"]

在使用硬化私钥派生函数时，得到的子私钥和链码是和普通的派生函数完全不同的。结果的密钥“分支”可以用来产生不受任何威胁的扩展公钥，因为它们包含的链码无法用来泄露任何私钥。因此硬化派生在树形结构中被使用的扩展公钥的上一层制造了一个“缝隙”。

简而言之，如果你想利用 xpub 的便利来派生公钥的许多分支，而不将自己暴露在链码泄露的威胁之下，那么你就应当从硬化父密钥派生，而不是从一个普通的父密钥。作为一种最佳实践，主密钥的第一层子密钥总是通过硬化派生得出的，以防止主密钥的泄露。

===== Index numbers for normal and hardened derivation

在派生函数中使用的索引号码是一个 32 比特整数。为了简单区分通过普通派生函数得出的密钥和通过硬化派生得出的密钥，这个索引号码被分为了两段。0 到 2^31^-1 之间的索引号码 _仅_ 用于普通派生。2^31^ 到 2^32^-1 之间的索引号码 _仅_ 用于硬化派生。因此，如果索引号码小于 2^31^，那么子密钥就是普通的，而如果索引号码大于等于 2^31^，那么子密钥就是硬化的。

为了使索引号码易于阅读和展示，硬化子钥的索引号码显示时以零开头，但是带有一个符号。因此第一个普通子钥被表示为 0，而第一个硬化子钥（索引 0x80000000）被表示为 0'。按照此顺序，第二个硬化密钥的索引是 0x80000001 而将被表示为 1'，以此类推。当你看到一个 HD 钱包索引 i'，那么它的意思就是 2^31^+i。

===== HD wallet key identifier (path)

((("hierarchical deterministic (HD) wallets")))HD 钱包中的密钥使用一种“路径”命名规范识别，树的每一层都用一个斜线（/）字符分割（参见 <<table_4-8>>）。从主私钥派生的私钥以“m”开头。从住公钥派生的公钥以“M”开头。因此，主私钥的第一个子私钥是 m/0。第一个子公钥是 M/0。第一个子私钥的第二个孙子子钥是 m/0/1，以此类推。

一个密钥的“祖先”是从右至左读的，知道你遇到派生出它的主密钥。例如，标识符 m/x/y/z 描述的是 m 的第 x 个子密钥的第 y 个子密钥的第 z 个子密钥。

[[table_4-8]]
.HD wallet path examples
[options="header"]
|=======
|HD path | Key described
| m/0 | The first (0) child private key from the master private key (m)
| m/0/0 | The first grandchild private key of the first child (m/0) 
| m/0'/0 | The first normal grandchild of the first _hardened_ child (m/0')
| m/1/0 | The first grandchild private key of the second child (m/1)
| M/23/17/0/0 | The first great-great-grandchild public key of the first great-grandchild of the 18th grandchild of the 24th child
|=======

===== Navigating the HD wallet tree structure

HD 钱包的树状结构提供了极大的灵活性。每一个父扩展密钥可以拥有四十亿个子密钥：二十亿个普通子密钥和二十亿个硬化子密钥。这些子密钥中的每一个又可以拥有另外四十亿个子密钥，如此延续。这棵树可以任意深，延续无限多代。但是，所有这些灵活性使得在这颗无限树上导航变得十分困难。在钱包的实现之间传递 HD 钱包尤其困难，因为分支和子分支的内部组织的可能性是无限的。

两个 BIP 为这种复杂性提供了解决方案，它们为 HD 钱包树的结构提案了某种标准。BIP-43 提案将第一个硬化子索引作为一个特殊的标识符，指示这个树形结构的“用途”。基于 BIP-43，HD 钱包应当仅使用树的层级-1的一个分支，使用索引号码通过定义它的用途来标识树其余部分的结构和名称空间。例如，一个 HD 钱包有意地仅使用 m/i'/ 分支来表示一个具体的用途，而这个用途是由索引号码“i”来标识的。

BIP-44 扩展了这个规范，在 BIP-43 之下建议以一个多账户结构作为“用途”号码 +44'+。所有遵循 BIP-44 结构的 HD 钱包都可以通过它们仅使用树的一个分支：m/44'/ 来识别。

BIP-44 规定这个结构由五个预定义的树层级组成：

-----
m / purpose' / coin_type' / account' / change / address_index
-----

第一层“用途”总是设定为 +44'+。第二层“币种”指定了加密货币的种类，允许 HD 钱包含有多种货币，每种货币在第二级拥有它自己的子树。目前存在三种定义好的货币：比特币是 m/44'/0'，比特币 Testnet 是 m/44'/1'，莱特币是 m/44'/2'。

树的第三层是“账户”，允许用户为了记账或组织的目的将他们的钱包分割为分离的逻辑子账户。例如，一个 HD 钱包可能包含两个比特币“账户”：m/44'/0'/0' 和 m/44'/0'/1'。每个账户都是它们自己子树的根。

((("keys and addresses", see="also public and private keys")))在第四层，“找零”，一个 HD 钱包拥有两棵子树，一个创建收款地址，一个创建找零地址。注意，虽然上一层使用了硬化派生，这一层使用的是普通派生。这允许树的这一层为了在一个不安全的环境下使用而导出扩展公钥。可用的地址是由 HD 钱包作为第四层的子节点派生出来的，使得树的第五层成为了“地址索引”。例如，在主账号下接受比特币支付的第三个收款地址是 M/44'/0'/0'/0/2。<<table_4-9>> 展示了更多例子。

[[table_4-9]]
.BIP-44 HD wallet structure examples
[options="header"]
|=======
|HD path | Key described
| M/44++&#x27;++/0++&#x27;++/0++&#x27;++/0/2 | The third receiving public key for the primary bitcoin account
| M/44++&#x27;++/0++&#x27;++/3++&#x27;++/1/14 | The fifteenth change-address public key for the fourth bitcoin account
| m/44++&#x27;++/2++&#x27;++/0++&#x27;++/0/1 | The second private key in the Litecoin main account, for signing transactions
|=======
