[[ch06]]
[[transactions]]
== Transactions

[[ch06_intro]]
=== Introduction

((("transactions", "defined")))((("warnings and cautions", see="also security")))交易是比特币系统中最重要的部分。比特币的其他部分都是被设计用来保证交易可以被创建、在网络上传播、验证、并最终加入全球的交易账簿（区块链）。每一笔交易都是比特币区块链 —— 全球复式簿记账本 —— 的一个公共条目。

这一章中我们将检视交易的所有各种形式，它们包含什么，如何创建它们，它们如何被验证，以及它们如何变为所有交易的永久记录的一部分。当我们在本章使用“钱包”一词时，我们指的是构建交易的软件，而非仅仅是密钥的数据库。

[[tx_structure]]
=== Transactions in Detail

((("use cases", "buying coffee", id="alicesix")))在<<ch02_bitcoin_overview>>中，我们使用区块浏览器看到了 Alice 在 Bob 的咖啡店里用来支付咖啡的交易（<<alices_transactions_to_bobs_cafe>>）。

区块浏览器应用展示了一笔从 Alice 的“地址”到 Bob 的“地址”的交易。这是交易所包含的内容的一种大幅简化。事实上，正如我们将要在本章中看到的，许多由区块浏览器构建的信息实际上在交易信息中不存在。

[[alices_transactions_to_bobs_cafe]]
.Alice's transaction to Bob's Cafe
image::images/mbc2_0208.png["Alice Coffee Transaction"]

[[transactions_behind_the_scenes]]
==== Transactions&#x2014;Behind the Scenes

((("transactions", "behind the scenes details of")))在幕后，实际的交易与区块浏览器通常提供的交易十分不同。实际上，我没能在各种比特币应用的用户界面中看到的高级结构在比特币系统中 _并不存在_。

我们可以使用 Bitcoin Core 的命令行接口（+getrawtransaction+ 和 +decoderawtransaction+）来取得 Alice “原始的”交易，将它解码，看看它含有什么。其结果就像这样：

[[alice_tx]]
.Alice's transaction decoded
[source,json]
----
{
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18",
      "vout": 0,
      "scriptSig" : "3045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813[ALL] 0484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf",
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 0.01500000,
      "scriptPubKey": "OP_DUP OP_HASH160 ab68025513c3dbd2f7b92a94e0581f5d50f654e7 OP_EQUALVERIFY OP_CHECKSIG"
    },
    {
      "value": 0.08450000,
      "scriptPubKey": "OP_DUP OP_HASH160 7f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a8 OP_EQUALVERIFY OP_CHECKSIG",
    }
  ]
}
----

你可能注意到了这笔交易中的一些事情，很可能是那些丢掉的东西！Alice 的地址在哪儿？Bob 的地址在哪儿？Alice “花费”的 0.1 的输入在哪儿？在比特币中，不存在币，不存在发送者，不存在接收者，不存在余额，不存在账号，也不存在地址。所有这些东西都是为了方便用户，为了让事情易于理解而在较高的层次上构建的。

你可能还注意到了许多奇怪且难以解读的字段，以及一些十六进制字符串。不要担心，我们将在本章详细地讲解这里展示的每一个字段。

[[tx_inputs_outputs]]
=== Transaction Outputs and Inputs

((("transactions", "outputs and inputs", id="Tout06")))((("outputs and inputs", "outputs defined")))((("unspent transaction outputs (UTXO)")))((("UTXO sets")))((("transactions", "outputs and inputs", "output characteristics")))((("outputs and inputs", "output characteristics")))一笔比特币交易的基础构建块儿是一个 _交易输出_。交易输出是一块不可分割的比特币，被记录在区块链上，被整个网络视为有效的。比特币完整节点会跟踪所有可用并可以花费的输出，称为 _未花费的交易输出_，或者 _UTXO_。所有 UTXO 的集合称为 _UTXO 集_，而且目前有数百万 UTXO。UTXO 集会随着新的 UTXO 被创建而增长，随着 UTXO 被消费而缩小。每一笔交易都表示 UTXO 集的一个变化（状态转换）。

((("balances")))当我们说一个用户的钱包“收到了”比特币，我们的意思是钱包探测到一个可以被这个钱包控制中的一个密钥花费的 UTXO。如此，一个用户的比特币“余额”就是这个用户的钱包可以花费的所有 UTXO 的总和，它们可能散落在数百笔交易和数百个区块中。余额的概念是由钱包应用创建的。钱包通过扫描区块链并聚合所有可以被它所控制的密钥花费的 UTXO 的值来计算用户的余额。大多数钱包都维护着一个数据库或使用一个数据库服务来存储它们可以花费的 UTXO 的快速引用集。

((("satoshis")))一个交易输出可以拥有一个任意（整数）值，以 satoshi 为单位。正如美元可以分解到小数点后两位成为美分，比特币可以分解到小数点后八位成为 satoshi。虽然一个输出可以拥有任意的值，但是一旦被创建它就不再可分割。这是输出的一个需要强调的重要性质：输出是 _离散_ 且 _不可分割_ 的值的单位，以整数 satoshi 为计量单位。一个未花费的输出仅能够被一笔交易一次性全部消费。

((("change, making")))如果一个 UTXO 大于一笔交易所需的值，它仍然必须被一次性全部消费，而且在这笔交易中必须生成找零。换句话说，如果你有一个价值 20 比特币的 UTXO 并且想只花费一个比特币，你的交易就必须消费整个 20 比特币的 UTXO 并产生两个输出：一个支付 1 比特币给你期望的收款人，另一个将 19 比特币的找零支付回你的钱包。由于交易输出不可分割的性质，大多数交易都必须生成找零。

想象一个顾客购买了 $1.50 的饮料，在她的钱包中翻找试图找出一个硬币与钞票的组合来支付 $1.50 的消费。如果有的话这位顾客将会选择正好面额（例如，一美元钞票和两个 25 美分），或者一个更小单位的组合（六个 25 美分），或者如果有必要，一个诸如 $5 钞票的更大单位。如果她给店员的钱多太多，比如 $5，那么她就会期望得到 $3.50 的找零，这些钱将回到她的钱包并可以在未来的交易中使用。

相似地，一笔比特币交易必须从用户的 UTXO 中创建，无论用户可用的单位是什么。就像用户不能把一美元的钞票撕成两半再作为货币使用一样，用户不能分割一个 UTXO。用户的钱包应用会从用户可用的 UTXO 中选择来组成一个多于或等于交易金额的金额。

就像在现实生活中一样，比特币应用可以使用几种策略来凑齐购买金额：组合几个小的单位，找出正好的面额，或使用一个大于交易金额的面额并产生找零。所有这些对可花费的 UTXO 的复杂组装都是由用户钱包自动完成，而且对用户是不可见的。只有在你用程序从 UTXO 中构建一个原始交易时它才有意义。

一笔交易消费前一笔交易的未花费输出，并创建新可以由未来的交易进行消费的交易输出。如此，成块的比特币价值就以消费和创建 UTXO 的交易链条的形式，从一个所有者移动到另一个所有者。

((("transactions", "coinbase transactions")))((("coinbase transactions")))((("mining and consensus", "coinbase transactions")))这个输出和输入链条的一个例外是一种称为 _coinbase_ 的特殊交易，它是每个区块的第一笔交易。这笔交易是由“获胜”的矿工放置在那里的，并且创建了全新的比特币作为挖掘的报酬支付给这个矿工。这种特殊的 coinbase 交易不消费 UTXO；而是有一种称为 “coinbase” 的特殊输入。这就是比特币的货币供应是如何在挖掘的过程中创建的，正如我们将在 <<mining>> 中看到的。

[TIP]
====
先有谁？输入还是输出，鸡还是蛋？严格地说，现有输出，因为生成新比特币的 coinbase 交易没有输入，是凭空创造输出的。
====

[[tx_outs]]
==== Transaction Outputs

((("transactions", "outputs and inputs", "output components")))((("outputs and inputs", "output parts")))每笔比特币交易都创建输出，它们被记录在比特币账簿上。出了一个特例以外，几乎所有这些输出都创建称为 UTXO 的可花费的比特币块，它们之后会被整个网络所识别，而且其所有者可以在未来的交易中花费它们。

UTXO 在 UTXO 集中被每一个完整比特币节点所跟踪。新的交易从这个 UTXO 集中消费（花费）一个或多个输出。

交易输出由两部分组成：

* 一定金额的比特币，以最小的比特币单位 _satoshi_ 为单位
* 一个密码谜题，决定着花费输出所需的条件

((("locking scripts")))((("scripting", "locking scripts")))((("witnesses")))((("scriptPubKey")))这个密码谜题也称为 _锁定脚本_、_目击者脚本_、或者 +scriptPubKey+。

在刚才提到的锁定脚本中使用的交易脚本语言，会在<<tx_script>>中详细讨论。

现在，让我们看看 Alice 的交易（在之前的<<transactions_behind_the_scenes>>中展示过），看看我们能否识别输出。在 JSON 编码中，输出在一个称为 +vout+ 的数组（列表）中：

[source,json]
----
"vout": [
  {
    "value": 0.01500000,
    "scriptPubKey": "OP_DUP OP_HASH160 ab68025513c3dbd2f7b92a94e0581f5d50f654e7 OP_EQUALVERIFY
    OP_CHECKSIG"
  },
  {
    "value": 0.08450000,
    "scriptPubKey": "OP_DUP OP_HASH160 7f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a8 OP_EQUALVERIFY OP_CHECKSIG",
  }
]
----

如你所见，这笔交易包含两个输出。每一个输出都由一个值和一个密码谜题定义。其中的编码是由 Bitcoin Core 显示的，它的值以比特币为单位，但是在交易本身中是用 satoshi 为单位以整数记录的。每个输出的第二部分是设置花费条件的密码谜题。Bitcoin Core 将其显示为 +scriptPubKey+，并给我们显示了一个该脚本的人类可读的形式。

锁定与解锁 UTXO 的话题将稍后的<<tx_lock_unlock>>中讨论。在 +scriptPubKey+ 中使用的脚本语言将在 <<tx_script>> 中讨论。但是在我们深入这些话题之前，我们需要理解交易输入与输出的整体结构。

===== Transaction serialization&#x2014;outputs

((("transactions", "outputs and inputs", "structure of")))((("outputs and inputs", "structure of")))((("serialization", "outputs")))当交易在网络上传输或在应用之间交换时，它们会被 _序列化_。序列化是这样一种处理，它将数据结构的内部表现形式转换为可以一次一个字节地传送的格式，也称为字节流。序列化最常用于为了在网络上传输或在文件中存储而对数据结构进行编码。<<tx_out_structure>>展示了一个交易输出的序列化格式。

[[tx_out_structure]]
.Transaction output serialization
[options="header"]
|=======
|Size| Field | Description
| 8 bytes (little-endian) | Amount  | Bitcoin value in satoshis (10^-8^ bitcoin)
| 1&#x2013;9 bytes (VarInt) | Locking-Script Size | Locking-Script length in bytes, to follow
| Variable | Locking-Script | A script defining the conditions needed to spend the output
|=======

大多数比特币的库和框架不会在内部将交易存储为字节流，因为那样会在每次你访问一个字段时都需要进行复杂的解析。为了便利和可读性，比特币的库在内部将交易以数据结构的形式存储（通常是面向对象的结构）。

((("deserialization")))((("parsing")))((("transactions", "parsing")))将一笔交易的字节流形式转换为一个库内部的数据结构的形式的处理，称为 _反序列化_ 或者 _交易解析_。为了网络传输、哈希、或者磁盘存储而转换回字节流的处理，称为 _序列化_。大多数比特币库都有內建的交易序列化和反序列化函数。

看看你能否从序列化的十六进制形式手动解码 Alice 的交易，找到我们先前看到的一些元素。包含两个输出的部分在 <<example_6_1>> 中高亮显示来辅助你：

[[example_6_1]]
.Alice's transaction, serialized and presented in hexadecimal notation
====
+0100000001186f9f998a5aa6f048e51dd8419a14d8a0f1a8a2836dd73+
+4d2804fe65fa35779000000008b483045022100884d142d86652a3f47+
+ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039+
+ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813+
+01410484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade84+
+16ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc1+
+7b4a10fa336a8d752adfffffffff02+*+60e31600000000001976a914ab6+*
*+8025513c3dbd2f7b92a94e0581f5d50f654e788acd0ef800000000000+*
*+1976a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac+*
+00000000+
====

这里是一些提示：

* 高亮的部分有两个输出，每个都如 <<tx_out_structure>> 中显示的那样被序列化。
* 0.015 个比特币的值是 1,500,000 satoshi。在十六进制中是 +16 e3 60+。
* 在序列化的交易中，+16 e3 60+ 的值是以小端法（最小有效字节优先）字节顺序编码的，所以它看起来是 +60 e3 16+。
* +scriptPubKey+ 的长度是 25 字节，也就是十六进制的 +19+。

[[tx_inputs]]
==== Transaction Inputs

((("transactions", "outputs and inputs", "input components")))((("outputs and inputs", "input components")))((("unspent transaction outputs (UTXO)")))((("UTXO sets")))交易输入（通过引用）标识了哪个 UTXO 将会被消费，并通过一个解锁脚本提供了所有权证明。

为了构建一笔交易，一个钱包会从它控制的 UTXO 中选择具有足够价值的 UTXO 来发起被请求的支付。有时候一个 UTXO 就够了，有时候需要多于一个。对于每一个将要在这次支付中消费的 UTXO 来说，钱包都创建了一个指向该 UTXO 的输入，并使用一个解锁脚本将之解锁。

让我们仔细看看一个输入的各个组成部分。一个输入的第一个部分是一个指向一个 UTXO 的指针，它指向 UTXO 在区块链上被记录的交易哈希和序列号。第二部分是一个解锁脚本，有钱包构建来满足在 UTXO 中设置的花费条件。最常见的是，这个解锁脚本是一个数字签名和一个证明比特币所有权的公钥。但是，并不是所有的解锁脚本都包含签名。第三部分是一个序列号，我们将在稍后讨论。

考虑一下我们 <<transactions_behind_the_scenes>> 中的例子。交易输入是一个称为 +vin+ 的数组（列表）：

[[vin]]
.The transaction inputs in Alice's transaction
[source,json]
----
"vin": [
  {
    "txid": "7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18",
    "vout": 0,
    "scriptSig" : "3045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813[ALL] 0484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf",
    "sequence": 4294967295
  }
]
----

如你所见，在这个列表中只有一个输入（因为一个 UTXO 包含了足够的价值来发起支付）。这个输入包含四个元素：

* 一个((("transaction IDs (txd)")))交易 ID，指向包含这个被花费的 UTXO 的交易
* 一个输出索引（+vout+），标识那笔交易中的哪一个 UTXO 是被引用的（第一个是零）
* 一个 +scriptSig+，它满足了加在 UTXO 上的条件，将之解锁花费
* 一个序列号（稍后讨论）

在 Alice 的交易中，输入指向了交易 ID：

----
7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18
----

而且输出索引是 +0+（也就是，那个交易创建的第一个 UTXO）。解锁脚本是由 Alice 的钱包在第一次取得被引用的 UTXO 时创建的，它检查它的锁定脚本，然后使用它构建必要的解锁脚本来满足它。

看着这个输入你可能注意到了，我们对这个 UTXO 一无所知，除了一个指向包含它的交易的引用。我们不知道它的价值（以 satoshi 为单位的金额），我们也不知道设置了花费它的条件的锁定脚本。为了得到这些信息，我们必须通过取得底层的交易来获得被引用的 UTXO。注意，因为输入的值没有明确地被记录，我们也必须使用被引用的 UXTO 来计算这笔交易的交易费（参见 <<tx_fees>>）。

不仅是 Alice 的钱包需要取得输入中引用的 UTXO。一旦这笔交易在网络上被广播，每一个验证节点也都需要取得这笔交易输入中引用的 UTXO，来验证这笔交易。

因为缺少上下文，交易在它们自身看起来是不完整的。它们在输入中引用 UTXO，但如果不取得这个 UTXO 我们就无法得知输入的价值或它们的锁定条件。在编写比特币软件时，每当你为了验证一笔交易、计算交易费或检查解锁脚本而解码交易时，你的代码都必须首先从区块链上取得被引用的 UTXO 以建立上下文 —— 在输入中暗含但没有出现在 UTXO 引用中。例如，为了计算交易费的金额，你必须知道输入和输出价值的总和。但不取得在输入中引用的 UTXO，你就无法知道它们的价值。所以一个看起来简单的单笔交易费用计算，事实上卷入了许多步骤和许多交易中的数据。

我们可以使用 Bitcoin Core 中相同的一系列命令（+getrawtransaction+ 和 +decoderawtransaction+）。通过它们我们可以得到前面的输入中被引用的 UTXO 并看一看：

[[alice_input_tx]]
.Alice's UTXO from the previous transaction, referenced in the input
[source,json]
----
"vout": [
   {
     "value": 0.10000000,
     "scriptPubKey": "OP_DUP OP_HASH160 7f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a8 OP_EQUALVERIFY OP_CHECKSIG"
   }
 ]
----

我们看到这个 UTXO 有价值 0.1 的 BTC，而且它有一个含有“OP_DUP OP_HASH160...”的解锁脚本（+scriptPubKey+）。

[TIP]
====
为了完全理解 Alice 的交易，我们必须取得在输入中引用的前一笔交易。取得前一笔交易和未花费交易输出的函数非常常见，几乎存在于每一个比特币库和 API 中。
====

===== Transaction serialization&#x2014;inputs

((("serialization", "inputs")))((("transactions", "outputs and inputs", "input serialization")))((("outputs and inputs", "input serialization")))当交易为了在网络上传输而被序列化后，它们的输入被编码为<<tx_in_structure>>中展示的字节流。

[[tx_in_structure]]
.Transaction input serialization
[options="header"]
|=======
|Size| Field | Description
| 32 bytes | Transaction Hash | Pointer to the transaction containing the UTXO to be spent
| 4 bytes | Output Index | The index number of the UTXO to be spent; first one is 0
| 1&#x2013;9 bytes (VarInt) | Unlocking-Script Size | Unlocking-Script length in bytes, to follow
| Variable | Unlocking-Script | A script that fulfills the conditions of the UTXO locking script
| 4 bytes | Sequence Number | Used for locktime or disabled (0xFFFFFFFF)
|=======

就像对待输出一样，让我们看看能否在序列化的格式中找到 Alice 的交易的输入。首先，是解码后的输入：

[source,json]
----
"vin": [
  {
    "txid": "7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18",
    "vout": 0,
    "scriptSig" : "3045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813[ALL] 0484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf",
    "sequence": 4294967295
  }
],
----

现在，让我们看看能否在<<example_6_2>>中十六进制的序列化结果中识别这些字段：

[[example_6_2]]
.Alice's transaction, serialized and presented in hexadecimal notation
====
+0100000001+*+186f9f998a5aa6f048e51dd8419a14d8a0f1a8a2836dd73+*
*+4d2804fe65fa35779000000008b483045022100884d142d86652a3f47+*
*+ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039+*
*+ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813+*
*+01410484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade84+*
*+16ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc1+*
*+7b4a10fa336a8d752adfffffffff+*+0260e31600000000001976a914ab6+
+8025513c3dbd2f7b92a94e0581f5d50f654e788acd0ef800000000000+
+1976a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac00000+
+000+
====

提示：

* 交易 ID 以相反的字节顺序被序列化，所以它以（十六进制的）+18+ 开头以 +79+ 结尾
* 输出索引是一个零的 4 字节组，很容易识别
* +scriptSig+ 的长度是 139 字节，或者十六进制的 +8b+
* 序列号被设置为 +FFFFFFFF+，也很容易识别((("", startref="alicesix")))

[[tx_fees]]
==== Transaction Fees

((("transactions", "outputs and inputs", "transaction fees")))((("fees", "transaction fees")))((("mining and consensus", "rewards and fees")))大多数交易都含有交易费，支付给旷工以报偿它们保证网络的安全。交易费本身也是一种安全机制，让攻击者使用交易来洪范网络的行为在经济上不可行。挖矿、费用和旷工收集的回报将在<<mining>>中详细讨论。

这一章讲解交易费是如何包含进常见的交易中的。大多数钱包会自动计算并加入交易费。但是，如果你使用程序，或者命令行接口来构建交易，那么你就必须手动引入并加入这些费用。

交易费作为一种刺激，使一笔交易被纳入（挖掘）下一个区块；同时通过在每一笔交易上强制收取少许交易费来抑制对系统的滥用。当一个旷工挖掘出了将交易记录在区块链上的区块时，交易费就由他收取。

交易费是根据交易的千字节大小计算出来的，而非交易中的比特币价值。总体来说，交易费是根据比特币网络中的市场力量设置的。旷工会根据许多标准 —— 包括交易费 —— 来调整交易的优先级，而且在某些情况下甚至可能会免费处理交易。交易费会影响处理优先级，这意味着带有足够交易费的交易更有可能被纳入下一个被挖掘的区块，而一笔费用不足或没有费用的交易可能会被推迟，在几个区块之后尽量处理，或者根本不被处理。交易费不是必须的，而且没有交易费的交易可能最终还是会被处理；但是，引入交易费会鼓励优先处理。

随着时间的推移，交易费的计算方法和它们对交易优先级的影响也发生了演变。一开始，交易费在整个网络上是固定的常数。渐渐地，费用的结构发生了松动并可能基于网络容量和交易量受到市场力量的影响。因为最早在 2016 年初时，比特币的容量限制已经造成了交易之间的竞争，导致更高的交易费并使免费交易实质上成了昨日黄花。零交易费或交易费很低的交易很少会被挖掘，而且有时甚至不会再网络上传播。

((("dynamic fees")))((("fees", "dynamic fees")))任何创建交易的比特币服务，包括钱包、兑换、零售程序等等，都 _必须_ 实现动态交易费。动态交易费可以通过第三方的费用估算服务或内建的费用估算算法来实现。如果你不确定，可以从一个第三方服务入手，在你获得经验之后再设计并实现你自己的算法，如果你希望移除第三方依赖的话。

费用估算算法会根据容量和“竞争对手”交易提供的交易费来计算恰当的费用。这些算法从过于简化（上一个区块中交易费的平均值或中间值）到十分精巧（统计分析）都有。它们会估算出必要的交易费（satoshi/byte），以使得一笔交易在特定数量的区块内被选中和纳入的可能性较高。大多数服务都向用户提供高、中、或低优先级交易费的选项。高优先级意味着用户会支付更高的交易费，但是交易很可能会被纳入下一个区块。中或低优先级意味着用户会支付较少的交易费，但是交易可能会花更长的时间才能得到确认。

((("bitcoinfees (third-party service)")))许多钱包应用都使用第三方服务来计算交易费。一个流行的服务是 http://bitcoinfees.21.co/[_http://bitcoinfees.21.co_]，它提供了一个 API 和一个以 satoshi/byte 为单位展示不同优先级所需费用的可视图像

[TIP]
====
((("static fees")))((("fees", "static fees")))比特币网络中，固定费用不再是可行的了。设定固定交易费的钱包会产生很烂的用户体验，因为交易会经常“卡壳”并一直处于未确认状态。不懂得比特币交易和交易费的用户会对“卡壳”的交易很失望，因为他们会认为自己的钱丢了。
====

<<bitcoinfees21co>> 中的图像以 10 satoshi/byte 为增量展示了实时的交易费估计值，以及在每个交易费区间内交易期望的确认时间（以分钟和区块数量为单位）。在每一个交易费区间中（例如，61&#x2013;70 satoshi/byte），两个水平的柱状图显示了未确认的交易的数量（1405）以及过去 24 小时内的交易总数（102,975）。根据这幅图，这一次被推荐的高优先级费用是 80 satoshi/byte，这个费用很可能会使交易在正好下一个区块中（零个区块延迟）被挖掘。举例来说，交易大小的中位数是 226 比特，那么为一笔交易推荐的交易费就是 18,080 satoshis（0.00018080 BTC）。

这个费用估算的数据可以通过一个简单的 HTTP REST API 取得，位于 https://bitcoinfees.21.co/api/v1/fees/recommended[https://bitcoinfees.21.co/api/v1/fees/recommended]。例如，在命令行中使用 +curl+ 命令：

.Using the fee estimation API
----
$ curl https://bitcoinfees.21.co/api/v1/fees/recommended

{"fastestFee":80,"halfHourFee":80,"hourFee":60}
----

这个 API 返回一个 JSON 对象，带有最快确认（+fastestFee+）、三个区块内确认（+halfHourFee+）和六个区块内确认（+hourFee+）所需的估算费用，以 satoshi/byte 为单位。

[[bitcoinfees21co]]
.Fee estimation service bitcoinfees.21.co
image::images/mbc2_0602.png[Fee Estimation Service bitcoinfees.21.co]

==== Adding Fees to Transactions

交易的数据结构中没有交易费字段。交易费是用输入和与输出和的差隐含表示的。从所有的输入中扣除所有的输出时候剩余的任何超出金额都是将被旷工收取的交易费。

[[tx_fee_equation]]
.Transaction fees are implied, as the excess of inputs minus outputs:
----
Fees = Sum(Inputs) – Sum(Outputs)
----

这是交易中有些令人糊涂的部分，但也是需要理解的重点，因为如果你在构建自己的交易你就必须确保自己没有无意之中由于没有花费输入而引入一个非常大交易费。那意味着必须计算所有输入，有必要的话要创建找零，不然结果就是你给了矿工很大一笔小费！

例如，如果你消费一个 20 比特币的 UXTO 来进行一次 1 比特币的支付，那么你就必须引入一个输入到你钱包的 19 比特币的找零。否则，“剩下的” 19 比特币会被认为是交易费，并由在一个区块中挖掘出你的交易的那个矿工收取。虽然你会得到优先处理并且矿工也很高兴，但这可能不是你想要的。

[WARNING]
====
((("warnings and cautions", "change outputs")))如果你在手动构建交易时忘记添加找零输出，你就会将找零作为交易费支付出去。“不用找了！”可能不是你想要的。
====

((("use cases", "buying coffee")))同样通过 Alice 在咖啡店的购买行为，让我们看看这在实际中是如何工作的。Alice 想要花费 0.015 比特币来支付她的咖啡。为了保证这笔交易会被优先处理，她将引入一笔交易费，比如说 0.001。那意味着交易的总成本将是 0.016。因此她的钱包必须提取一组加起来等于或多于 0.016 的 UTXO，并且如果有必要的话创建找零。假定她的钱包有一个 0.2 比特币的 UTXO 可用。那么它将会消费这个 UTXO，创建一个 0.015 的输出到 Bob 的咖啡店，以及第二个 0.184 比特币的找零输出回到她自己的钱包，留下 0.001 比特币不分配，作为一个隐含的交易费。

((("use cases", "charitable donations")))((("charitable donations")))现在，让我们看一个不同的场景。我们的菲律宾儿童慈善家 Eugenia，已经完成了给孩子们购买教科书的集资。她从世界各地的人们那里收到了几千笔小型捐赠，总共 50 比特币，于是她的钱包中充满了非常小的支付（UTXO）。现在她想要支付比特币，从当地的出版商那里购买几百本教科书。

当 Eugenia 的钱包试图构建一个大的支付交易时，它必须从可用的 UTXO 集中集资，这将会组合许多小的资金。这意味着得出的交易将会从一百多个小额 UTXO 中集资作为输入，而只有一个支付给出版商的输出。一个拥有许多输入的交易将会大于 1KB，也许是好几 KB 大小。其结果是，与一个中等大小的交易相比，它会被要求支付多得多的交易费。

Eugenia 的钱包应用将会通过测量交易的大小并乘以每 KB 单位的费用来计算一个合适的交易费。许多钱包会为大交易超额支付交易费来确保交易被优先处理。交易费变高不是因为 Eugenia 花的钱多，而是因为她的交易更复杂，而且更大 —— 交易费是与交易的比特币价值无关的。((("", startref="Tout06")))

[[tx_script]]
[role="pagebreak-before less_space_h1"]
=== Transaction Scripts and Script Language

((("transactions", "scripts and Script language", id="Tsript06")))((("scripting", "transactions and", id="Stransact06")))比特币交易脚本语言，称为 _脚本_，是一种类似于 Forth 逆波兰表示法的基于栈运行的语言。如果这听起来像是胡言乱语，那么你可能没有学习过 1960 年代的编程语言，不过没关系；我们将在这一章完全讲解它。放在 UTXO 上的锁定脚本和解锁脚本都是用这种语言编写的。当一笔交易被验证时，每一个输入中的解锁脚本就会和相应的锁定脚本一起运行，来判断它是否满足花费条件。

脚本是一种非常简单的语言，它被设计为适用范围有限并可以在大范围的硬件上运行，也许像一个嵌入式设备一样简单。它只需要极少的处理，而且不能像现代编程语言那样做许多炫酷的事情。由于它用于验证可编程货币，所以这是一种谨慎的安全特性。

((("Pay-to-Public-Key-Hash (P2PKH)")))如今，大多数通过比特币网络处理的交易都是“向 Bob 的比特币地址支付”的形式，基于一种称为Pay-to-Public-Key-Hash 的脚本。然而，比特币交易可不限于“向 Bob 的比特币地址支付”这样的脚本。事实上，锁定脚本可以被编写为表达复杂条件的多种形式。为了理解这些更复杂的脚本，我们必须首先理解交易脚本的基础和脚本语言。

在这一节中，我们将展示比特币交易脚本语言的基本组件，并展示它是如何被用于表达简单的花费条件的，以及这些条件如何才能够被解锁脚本满足。

[TIP]
====
((("programmable money")))比特币交易验证不是基于一种静态的模式的，而是通过执行一种脚本语言完成的。这种语言允许表达几乎是无限多种条件。这就是比特币如何得到“可编程货币”的力量的。
====


==== Turing Incompleteness

((("Turing incompleteness")))比特币交易脚本语言含有许多操作符，但是被小心地限定在一种重要的方式上 —— 它没有循环和除了条件流程控制之外的复杂流程控制能力。这保证了这种语言不是 _图灵完备_ 的，这意味着脚本的复杂性有限而且执行次数可以预料。脚本不是一种通用语言。((("denial-of-service attacks")))((("denial-of-service attacks", see="also security")))((("security", "denial-of-service attacks")))这些限制保证这种语言不能用来创建无限循环或者其他形式的“逻辑炸弹”，并以一种对比特币网络造成拒绝服务供给的形式嵌入一个交易中。记住，每一笔交易都会被比特币网络上的每一个完整节点验证。一种受限的语言会防止交易验证机制被用作一种漏洞。

==== Stateless Verification

((("stateless verification")))比特币交易语言是无状态的，因为在脚本执行之前不存在状态，或者在脚本执行之后不存在被保存的状态。因此，一个脚本执行所需的所有的信息都被包含在脚本中。一个脚本将会在任意系统上以可预期的方式执行。如果你的系统能验证一个脚本，那么你就可以确定比特币网络上的任何其他系统也都能验证这个脚本，这意味着一笔有效的交易对每个人都是有效的，而且每个人都知道这一点。这种结果的可预见性实质上是比特币系统的一个好处。

[[tx_lock_unlock]]
==== Script Construction (Lock + Unlock)

比特币交易验证引擎依靠两种类型的脚本来验证交易：一个锁定脚本和一个解锁脚本。

((("locking scripts")))((("unlocking scripts")))((("scripting", "locking scripts")))锁定脚本是添加在输出上的一个花费条件：它指定了在未来花费这个输出所必须满足的条件。((("scriptPubKey")))历史上，锁定脚本被称为 _scriptPubKey_，因为它通常含有一个公钥或者比特币地址（公钥哈希）。在这本书中我们称它为 “锁定脚本” 来表达这种脚本技术所能使用的更广泛的可能范围。在大多数比特币应用中，我们所指的锁定脚本将在源代码中以 +scriptPubKey+ 出现。((("witnesses")))((("cryptographic puzzles")))你还将会看到锁定脚本被称为 _目击者脚本_（参见<<segwit>>）或者更一般地称为一个 _谜题_。这些词都指的是在不同层次抽象上的同一个东西。

解锁脚本是一个“解决”，或者满足，通过一个锁定脚本添加在输出上的条件的脚本，并允许输出被花费。解锁脚本是每个交易输入的一部分。大多数时候它们包含一个由用户钱包从他/她的私钥中生成的数字签名。((("scriptSig")))历史上，这个解锁脚本被称为 _scriptSig_，因为它通常含有一个数字签名。在大多数比特币应用中，源代码使用 +scriptSig+ 指代解锁脚本。你还可能看到解锁脚本被称为 _目击者_（参见<<segwit>>）。在这本书中，我们称它为 “解锁脚本” 来表达更广义上的锁定脚本需求，因为不是所有的解锁脚本都必须包含签名。

每个比特币验证节点都将通过一起执行锁定和解锁脚本来验证交易。每个输入都包含一个解锁脚本并指向先前存在的 UTXO。验证软件将会拷贝解锁脚本，通过输入取得被引用的 UTXO，并从这个 UTXO 中拷贝锁定脚本。然后解锁和锁定脚本被依次执行。如果解锁脚本满足锁定脚本的条件（参见 <<script_exec>>），输入就是有效的。作为交易整体验证的各个部分，所有的输入都是被独立验证的。

注意 UTXO 是被永久记录在区块链上的，因此是不可逆而的，而且不受在一个新交易中引用花费失败的影响。仅有正确满足输出的条件的有效交易才被认为是“花费了”并从未花费的交易输出集（UXTO 集）中移除。

<<scriptSig_and_scriptPubKey>>是一个最常见类型的比特币交易（一个向公钥哈希的支付）中的解锁和锁定脚本的例子，展示了在脚本验证之前将解锁和锁定脚本连接得到的组合脚本。

[[scriptSig_and_scriptPubKey]]
.Combining scriptSig and scriptPubKey to evaluate a transaction script
image::images/mbc2_0603.png["scriptSig_and_scriptPubKey"]

===== The script execution stack

比特币的脚本语言被称为基于栈的语言，因为它使用了一种称为 _栈_ 的数据结构。栈是一种非常简单的数据结构，可以看做一堆堆叠的卡牌。栈允许两种操作：push 和 pop。Push 将一个项目加入栈顶。Pop 则从栈顶移除顶层项目。一个栈的操作仅能够实施在栈顶部的项目上。栈的数据结构也称为先入先出，或者 “LIFO” 队列。

脚本语言通过从左向右处理每一个项目来执行脚本。数字（数据常量）被压入栈。操作符会将一个或多个参数弹出或压入栈，操作它们，还可能向栈中压入一个结果。例如，+OP_ADD+ 会从栈中弹出两个项目，将它们相加，然后将得到的和压入栈顶。

条件操作符会对一个条件求值，产生一个非 TRUE 即 FALSE 的布尔值结果。例如，+OP_EQUAL+ 弹出从栈中弹出两个项目，如果它们相等就向栈中压入 TRUE（TURE 使用数字 1 表示），如果不相等就压入 FALSE（用 0 表示）。比特币交易脚本通常包含一个条件操作符，这样它们就可以产生结果 TRUE 来表示交易有效。

===== A simple script

现在让我们将学到的脚本和栈的知识应用于一些简单的例子。

在 <<simplemath_script>> 中，脚本 +2 3 OP_ADD 5 OP_EQUAL+ 展示了算数加法操作符 +OP_ADD+，将两个数字相加并将结果放到栈顶，接着是条件操作符 +OP_EQUAL+，它检查结果的和是否等于 +5+。为了简洁，前缀 +OP_+ 在这个一步一步的例子中被省略了。关于可用的脚本操作符和函数的更多细节，参见 <<tx_script_ops>>。

虽然大多数锁定脚本指向一个公钥哈希（实质上是一个比特币地址），因此要求所有权证明才能花费资金，但脚本不必非得那么复杂。任何结果为 TRUE 的锁定和结果脚本组合都是有效的。我们使用过的脚本语言简单算术的例子也是一个可以用于锁定交易输出的有效脚本。

将算数例子中的脚本的一部分用作锁定脚本：

----
3 OP_ADD 5 OP_EQUAL
----

它可以被含有一个带有这样的解锁脚本的输入的交易所满足：

----
2
----

验证软甲组合锁定和解锁脚本得出的脚本是：

----
2 3 OP_ADD 5 OP_EQUAL
----

正如我们在 <<simplemath_script>> 中一步一步的例子中看到的，当这个脚本被执行后，它的结果是 +OP_TRUE+，使得这个交易成为有效的。这不仅是一个有效的交易输出锁定脚本，而且得出的 UTXO 可以被任何具备算数技能而知道数字 2 可以满足这个脚本的人花费。

[TIP]
====
((("transactions", "valid and invalid")))如果栈最后的结果是 +TRUE+，任何其他非零值，或者脚本执行后栈为空，交易就是有效的。如果栈最后的结果是 +FALSE+（一个长度为零的空值），或者脚本的执行被一个操作符明确终止了，例如 +OP_VERIFY+、+OP_RETURN+、或者 +OP_ENDIF+ 之类的条件终止符。详细参见 <<tx_script_ops>>。
====

[[simplemath_script]]
.Bitcoin's script validation doing simple math
image::images/mbc2_0604.png["TxScriptSimpleMathExample"]

[role="pagebreak-before"]
下面是一个稍稍复杂一些的脚本，它计算 ++2 + 7 -- 3 + 1++。注意档脚本在一行中包含几个操作符时，栈允许一个操作符的结果被下一个操作符使用：

----
2 7 OP_ADD 3 OP_SUB 1 OP_ADD 7 OP_EQUAL
----

试着用纸和笔亲自验证一下这个脚本。当这个脚本执行结束时，你应当会在栈中得到值 +TRUE+。

[[script_exec]]
===== Separate execution of unlocking and locking scripts

((("security", "locking and unlocking scripts")))在原始的比特币客户端中，解锁和锁定脚本被连接在一起顺序执行。但是由于安全原因，这在 2010 年发生了改变，因为一个漏洞允许不合规的解锁脚本在栈中压入数据并污染锁定脚本。在当前的实现中，脚本是分离执行的，栈会在两次执行之间传递，如下所述。

首先，使用栈执行引擎，解锁脚本会被执行。如果解锁脚本执行无误（也就是，没有留下“挂着的”操作符），那么主栈就会被拷贝并执行锁定脚本。如果使用从解锁脚本拷贝来的栈数据执行锁定脚本的结果是 “TRUE”，那么解锁脚本就成功地满足了锁定脚本强制的条件，而且因此输入是一个花费 UTXO 的有效授权。如果组合脚本执行之后留下任何不同于 “TRUE” 的结果，那么输入就是无效的，因为它没能满足 UXTO 上的花费条件。

[[p2pkh]]
==== Pay-to-Public-Key-Hash (P2PKH)

((("Pay-to-Public-Key-Hash (P2PKH)")))绝大部分在比特币网络上处理的交易所花费的输出都是由一个 Pay-to-Public-Key-Hash 或者“P2PKH”脚本锁定的。这些输出含有一个将输出锁定在一个公钥哈希 —— 更常称为比特币地址 —— 上的脚本。一个由 P2PKH 脚本锁定的输出可以通过出示一个公钥和一个由相应私钥创建的数字签名（参见<<digital_sigs>>）来解锁。

((("use cases", "buying coffee")))例如，让我们再一次看看 Alice 向 Bob 的咖啡店的支付。Alice 发起了一个 0.015 比特币的支付给咖啡店的比特币地址。这笔交易的输出将会由这种形式的脚本锁定：

----
OP_DUP OP_HASH160 <Cafe Public Key Hash> OP_EQUALVERIFY OP_CHECKSIG
----

+Cafe Public Key Hash+ 等价于咖啡店的比特币地址，不带 Base58Check 编码。大多数应用程序会以十六进制编码显示 _public key hash_，而不是我们熟悉的以 “1” 开头的 Base58Check 格式的比特币地址。

这个锁定脚本可以有这种形式的解锁脚本满足：

----
<Cafe Signature> <Cafe Public Key>
----

这两个脚本放在一起会形成下面的组合验证脚本：

----
<Cafe Signature> <Cafe Public Key> OP_DUP OP_HASH160
<Cafe Public Key Hash> OP_EQUALVERIFY OP_CHECKSIG
----

在被执行是，这个组合脚本会在，而且仅在，解锁脚本匹配锁定脚本设定的条件时求值为 TRUE。换句话说，如果解锁脚本拥有从咖啡店的私钥中得来的有效签名，它的结果就位 TRUE。（这个私钥对应于作为障碍设定的公钥）

图 pass:[<a data-type="xref" href="#P2PubKHash1" data-xrefstyle="select: labelnumber">#P2PubKHash1</a>] 和 pass:[<a data-type="xref" href="#P2PubKHash2" data-xrefstyle="select: labelnumber">#P2PubKHash2</a>] 展示了这个组合脚本一步一步的执行过程（分两部分），它将证明这是一个有效的交易。((("", startref="Tsript06")))((("", startref="Stransact06")))

[[P2PubKHash1]]
.Evaluating a script for a P2PKH transaction (part 1 of 2)
image::images/mbc2_0605.png["Tx_Script_P2PubKeyHash_1"]

[[P2PubKHash2]]
.Evaluating a script for a P2PKH transaction (part 2 of 2)
image::images/mbc2_0606.png["Tx_Script_P2PubKeyHash_2"]

[[digital_sigs]]
=== Digital Signatures (ECDSA)

((("transactions", "digital signatures and", id="Tdigsig06")))至此，我们还没有深入探究过 “数字签名” 的细节。这一节中我们将看看数字签名是如何工作，以及它们是如何在不泄露私钥的情况下证明私钥所有权的。

((("digital signatures", "algorithm used")))((("Elliptic Curve Digital Signature Algorithm (ECDSA)")))在比特币中使用的数字签名算法是 _椭圆曲线数字签名算法_，或者 _ECDSA_。正如我们在 <<elliptic_curve>> 中讲过的，ECDSA 是基于椭圆曲线私/公钥对的数字签名算法。ECDSA 被脚本函数 +OP_CHECKSIG+、+OP_CHECKSIGVERIFY+、+OP_CHECKMULTISIG+、和 +OP_CHECKMULTISIGVERIFY+ 使用。每当你在一个锁定脚本中看到这些东西时，解锁脚本就一定包含一个 ECDSA 签名。

((("digital signatures", "purposes of")))数字签名在比特币中服务于三个目的（参见后面的旁注）。首先，签名证明了私钥的所有者，也就是资金的所有者，已经 _授权_ 花费这些资金。第二，这个授权的证明是 _不可否认的_（不可否认性）。第三，这个签名证明了这笔交易在被签署之后没有被，也 _不能被任何人修改_。

注意交易的每一个输入都是独立签署的。这很重要，因为签名和输入都没必要属于同一个“所有者”，或被同一个“所有者”使用。事实上，一个称为 “CoinJoin” 的特殊交易方案就利用这一事实创建私密的多方交易。

[NOTE]
====
每个交易输入以及它可能包含的签名都是 _完全_ 独立于其他输入和签名的。多方可以合作构建交易并每人签署一个输入。
====

[[digital_signature_definition]]
.Wikipedia's Definition of a "Digital Signature"
****
((("digital signatures", "defined")))数字签名是一种数学方案，用来展示一个数字消息或文档的确实性。一个有效的数字签名给接收者理由去相信消息是由一个认识的发送者创建的（认证），发送者不能否认自己发送过这个消息（不可否认），而且消息在传送过程中没有发生过改变（整合性）。

_摘自：https://en.wikipedia.org/wiki/Digital_signature_
****

==== How Digital Signatures Work

((("digital signatures", "how they work")))数字签名是由两部分组成的 _数学方案_。第一部分是使用私钥（签名密钥）从一个消息（交易）中创建签名的算法。第二部分是允许任何人在给出消息和公钥的情况下验证签名的算法。

===== Creating a digital signature

在比特币的 ECDSA 算法实现中，被签署的“消息”就是交易，或者更准确地说是交易数据中指定子集的哈希（参见 <<sighash_types>>）。签署密钥是用户的私钥。其结果就是签名：

latexmath:[\(Sig = F_{sig}(F_{hash}(m), dA)\)]

其中：

* _dA_ 是签名私钥
* _m_ 是交易（或它的一部分）
* _F_~_hash_~ 是哈希函数
* _F_~_sig_~ 是签名函数
* _Sig_ 是得出的签名

在 <<ecdsa_math>> 中有更多 ECDSA 的数学方法的详细。

函数 _F_~_sig_~ 生成一个由两个值组成的签名 +Sig+，这两个值通常被称为 +R+ 和 +S+：

----
Sig = (R, S)
----

((("Distinguished Encoding Rules (DER)")))现在 +R+ 和 +S+ 这两个值已经被计算出来了，通过一种称为 _特异编码规则_，或 _DER_ 的国际标准编码方案，它们被序列化为一个字节流。

[[seralization_of_signatures_der]]
===== Serialization of signatures (DER)

让我们再一次看看 Alice ((("use cases", "buying coffee", id="alicesixtwo")))创建的交易。在交易的输入中存在一个解锁脚本，它包含如下从 Alice 钱包中得出的 DER 编码的签名：

----
3045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e381301
----

这个签名是 +R+ 和 +S+ 值的序列化字节流，+R+ 和 +S+ 是从 Alice 的钱包中生成的，用来证明她拥有授权花费输出用的私钥。这个序列化格式有一下九个部分组成：

* +0x30+&#x2014;指示 DER 序列的开始
* +0x45+&#x2014;序列的长度（69 字节）
  * +0x02+&#x2014;紧接着一个整数值
  * +0x21+&#x2014;这个整数的长度（33 字节）
  * +R+&#x2014;++00884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb++
  * +0x02+&#x2014;紧接着另一个整数
  * +0x20+&#x2014;这个整数的长度（32 字节）
  * +S+&#x2014;++4b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813++
* 一个用来表示使用的哈希方法（+SIGHASH_ALL+）的后缀（+0x01+）

看看你能不能使用这个列表解码 Alice 的序列化（DER 编码）签名。重要的数字是 +R+ 和 +S+；剩下的数据是 DER 编码方案的组成部分。

==== Verifying the Signature

((("digital signatures", "verifying")))如果某人要验证这个签名，它必须拥有这个签名（+R+ 和 +S+），序列化的交易，和公钥（对应于创建签名时使用的私钥）。实质上，验证签名意味着 “只有生成这个公钥的私钥的所有者才能在这笔交易上生成这个签名”。

签名验证算法接收消息（交易或交易的一部分的哈希），签署者的公钥和签名（+R+ 和 +S+ 的值），如果签名对于这个消息和公钥是有效的就返回 TRUE。

[[sighash_types]]
==== Signature Hash Types (SIGHASH)

((("digital signatures", "signature hash types")))((("commitment")))数字签名被应用于消息，在比特币中，就是交易本身。签名隐含了签署者对指定交易数据的 _担保_。在其最简单的形式上，签名应用于交易整体，因此担保所有的输入，输出，和其他交易字段。但是，一个签名可以仅对交易数据的一个子集进行担保，这对我们将在这一节中看到的集中场景来说十分有用。

((("SIGHASH flags")))比特币有一种方法指示交易数据的哪一部分会被包含进私钥签署的哈希中：+SIGHASH+ 标志。这个 +SIGHASH+ 标志是接在签名后面的一个字节。每一个签名都有一个 +SIGHASH+ 标志，而且这个标志可以因输入不同而不同。一个带有三个签名输入的交易可能拥有三个不同的 +SIGHASH+ 标志，每一个签名签署（担保）交易的不同部分。

记住，，每一个输入都可能在它的解锁脚本中包含一个签名。最终，一笔含有多个输入的交易可能会拥有多个 +SIGHASH+ 标志不同的签名，每一个都在各自的输入中担保交易不同的部分。还要注意比特币交易可能含有来自不同“所有者”的输入，他们可能会在一个构建了一部分的（而且无效）交易中签署仅签署一个输入，与其他人一起收集所有必要的签名才能使交易成为有效的。许多 +SIGHASH+ 标志类型仅在你考虑多名参与者在比特币网络之外协作，并更新一个部分签署的交易时才有意义。

[role="pagebreak-before"]
有三种 +SIGHASH+ 标志：+ALL+、+NONE+、和 +SINGLE+ 如 <<sighash_types_and_their>> 中所示。

[[sighash_types_and_their]]
.SIGHASH types and their meanings
[options="header"]
|=======================
|+SIGHASH+ 标志| 值 | 描述
| +ALL+ | 0x01 | 签名应用于所有输入和输出
| +NONE+ | 0x02 | 签名应用于所有输入，而不用于任何输出
| +SINGLE+ | 0x03 | 签名用于所有输入，但只有与被签署的输入具有相同索引号码的输出
|=======================

另外，还有一个修改标志 +SIGHASH_ANYONECANPAY+，它可以与前面每一个标志相组合。当 +SIGHASH_ANYONECANPAY+ 被设置时，只有输入会被签署，留下其他的（以及它们的序列号码）用于修改。+ANYONECANPAY+ 的值是 +0x80+，而且通过位操作 OR 来应用，得出的组合标志如 <<sighash_types_with_modifiers>> 中所示。

[[sighash_types_with_modifiers]]
.SIGHASH types with modifiers and their meanings
[options="header"]
|=======================
|SIGHASH 标志| 值 | 描述
| ALL\|ANYONECANPAY | 0x81 | 签名应用于一个输入和所有的输出
| NONE\|ANYONECANPAY | 0x82 | 签名应用于一个输入，不用于任何输出
| SINGLE\|ANYONECANPAY | 0x83 | 签名用于一个输入，和具有相同索引号码的输出
|=======================

在签署和验证期间 +SIGHASH+ 应用的方式是，交易被做出一份拷贝，而且其中特定的字段被截去（设置长度为零并置空）。得出的交易被序列化。+SIGHASH+ 标志被加在序列化的交易末尾，然后这个结果被哈希。这个哈希本身就是被签署的“消息”。根据使用的 +SIGHASH+ 标志不同，交易的不同部分会被截去。得出的哈希会根据交易中不同的数据子集而不同。通过将引入 +SIGHASH+ 作为哈希前的最后一步，签名也担保了 +SIGHASH+ 类型，所以它不能被改变（也就是被矿工改变）。

[NOTE]
====
所有的 +SIGHASH+ 类型都会签署交易的 +nLocktime+ 字段（参见 <<transaction_locktime_nlocktime>>）。另外，在交易被签署之前，+SIGHASH+ 类型本身也会被连接在交易上，所以一旦签署它就无法更改。
====

在 Alice 的交易例子中（参见 <<seralization_of_signatures_der>> 中的列表），我们看到 DER 编码的签名的最后一部分是 +01+，这就是 +SIGHASH_ALL+ 标志。这锁定了交易数据，所以 Alice 的签名是对所有输入和输出状态的担保。这是最常见的签名形式。

让我们看一些其他的 +SIGHASH+ 类型，以及它们可以如何在实际中使用：

+ALL|ANYONECANPAY+ :: ((("charitable donations")))((("use cases", "charitable donations")))这种结构可以用来制造一个“众筹”形式的交易。想要集资的某个人可以构建一个只有单一输出的交易。这个输出向集资者支付“目标”金额。这样的交易显然是无效的，因为它没有输入。但是，现在其他人可以通过加入自己的输入来修改它，作为捐赠。他们使用 +ALL|ANYONECANPAY+ 签署自己的输入。除非收集的输入达到了输出指定的值，否则交易就一直是无效的。每一笔捐赠都是一笔“抵押”，在目标金额筹集到之前集资者无法收取。

+NONE+ :: 这个结构可以用于创建指定金额的“不记名支票”或者“空头支票”。它担保输入，但允许输出锁定脚本改变。任何人都可以将自己的比特币地址写到输出锁定脚本来兑现交易。但是，输出值本身是被签名锁定的。

+NONE|ANYONECANPAY+ :: 这个结构可以用于构建一个“吸尘器”。在自己的钱包中有许多小 UTXO 的用户，在交易费超过价值的情况下无法花费它们。使用这种签名，小额 UTXO 可以捐赠给任何人随时花费。

((("Bitmask Sighash Modes")))存在一些修改和扩展 +SIGHASH+ 系统的提案。其中之一是由 Blockstream 的 Glenn Willen 作为 Elements 项目的一部分提出的 _Bitmask Sighash Modes_。它的目标是创建一个灵活的 +SIGHASH+ 类型替代品，允许“随意的，可由矿工重写的输入和输出掩码”，可以用来表达 “更复杂的合约预先担保方案，比如一个分部式资产交换中的签名出价”。

[NOTE]
====
你不会在用户的钱包应用中看到 +SIGHASH+ 标志的选项。除了几个特例，钱包会构建 P2PKH 脚本并使用 +SIGHASH_ALL+ 标志签署。要使用不同的 +SIGHASH+ 标志，你就必须编写软件来构建并签署交易。更重要的是，+SIGHASH+ 标志可以用于带有奇特用法的特殊比特币应用。
====

[[ecdsa_math]]
==== ECDSA Math

((("Elliptic Curve Digital Signature Algorithm (ECDSA)")))正如早先提到的，签名是由 _F_~_sig_~ 数学函数创建的，它产生一个由 _R_ 和 _S_ 值组成的签名。在这一节中我们将详细看看 _F_~_sig_~ 函数。

((("public and private keys", "key pairs", "ephemeral")))签名算法首先生成一个 _瞬时_（临时）私公钥对。在完成签署私钥和交易哈希的变形之后，这个临时密钥对用来计算 _R_ 和 _S_ 的值。

这个临时密钥对基于一个随机数 _k_，它被用作临时的私钥。从 _k_ 中，我们生成相应的临时公钥 _P_（计算方法是 _P = k*G_，与比特币公钥生成的方式相同；参见 <<pubkey>>）。数字签名的 _R_ 值就是瞬时公钥 _P_ 的横坐标。

从这里开始，算法计算签名中 _S_ 的值，就像：

_S_ = __k__^-1^ (__Hash__(__m__) + __dA__ * __R__) _mod p_

其中：

* _k_ 是瞬时私钥
* _R_ 是瞬时公钥的横坐标
* _dA_ 是签名用私钥
* _m_ 是交易数据
* _p_ 是椭圆曲线的素数阶

验证时签名生成函数的反向操作，使用 _R_，_S_ 值和公钥来计算 _P_ 值，它是椭圆曲线上的一个点（在签名生成过程中使用的瞬时公钥）：

_P_ = __S__^-1^ * __Hash__(__m__) * _G_ + __S__^-1^ * _R_ * _Qa_

其中：

* _R_ 和 _S_ 是签名的值
* _Qa_ 是 Alice 的公钥
* _m_ 是被签署的交易数据
* _G_ 是椭圆曲线生成点

如果计算出的点 _P_ 的横坐标与 _R_ 相等，那么验证者可以得出结论说签名是有效的。

注意在验证签名时，私钥都没有被告知和泄露。

[TIP]
====
ECDSA 的数学方法十分复杂和难以理解。在线上有许多了不起的指导可能会有所帮助。搜索 “详解 ECDSA” 或这个链接：http://bit.ly/2r0HhGB[]。
====

==== The Importance of Randomness in Signatures

((("digital signatures", "randomness in")))正如我们在 <<ecdsa_math>> 中看到的，签名生成算法使用了一个随机密钥 _k_，作为瞬时私/公钥对的基础。_k_ 的值不重要，_只要它是随机的_。如果同一个 _k_ 值用来在两个不同的消息（交易）上生成前面，那么这个签名 _私钥_ 就可以被任何人计算出来。在签名算法中重复使用同一个 _k_ 值会导致私钥泄露！

[WARNING]
====
((("warnings and cautions", "digital signatures")))如果在签名算法中对两个不同的交易使用相同的 _k_ 值，那么私钥就可以被计算出来并泄露给全世界！
====

这不只是理论上的可能性。我们曾经在比特币对交易签名的几种不同实现中看到过这个问题导致私钥的泄露。由于不经意地重用 _k_ 值，人们的资金被窃取了。重用 _k_ 值最常见的原因是对随机数生成器的不当初始化。

((("random numbers", "random number generation")))((("entropy", "random number generation")))((("deterministic initialization")))为了避免这种漏洞，行业中的最佳实践是不要使用以熵为种子的随机数生成器来生成 _k_，而是使用确定性随机处理，并以交易数据本身作为种子。这保证了每一笔交易都会生成一个不同的 _k_。对 _k_ 的确定性初始化的行业标准定义在  https://tools.ietf.org/html/rfc6979[RFC 6979]，由互联网工程系特遣队发布。

如果你要在比特币中实现一个交易签署算法，你 _必须_ 使用 RFC 6979 或相似的确定性随机算法来保证你为每一笔交易都创建不同的 _k_。((("", startref="Tdigsig06")))

=== Bitcoin Addresses, Balances, and Other Abstractions

((("transactions", "higher-level abstractions", id="Thigher06")))在这一章开始的时候，我们发现交易在钱包、区块链浏览器、和其他面向用户的应用中展示的方式与它们在“幕后”看起来的方式十分不同。许多前面章节中看到的简单而熟悉的概念，比如比特币地址和余额，看起来没有出现在交易的结构中。我们看到交易中实质上不含比特币地址，而是通过锁定和解锁比特币离散值的脚本进行操作。这个系统中的任何地方都不存在余额，而每个钱包应用都重点表示用户钱包的余额。

现在我们探索了比特币交易中实际上包含的东西，我们可以讲解高级的抽象是如何从交易的基本组件中衍生出来的了。

让我们再一次看看 Alice 的交易是如何在流行的区块链浏览器中表示的（<<alice_transaction_to_bobs_cafe>>）。

[[alice_transaction_to_bobs_cafe]]
.Alice's transaction to Bob's Cafe
image::images/mbc2_0208.png["Alice Coffee Transaction"]

在交易的左边，区块链浏览器将 Alice 的比特币地址显示为“发送者”。事实上，这个信息不再交易内部。当区块链浏览器取得这笔交易时，它也在输入中取得了被引用的前一笔交易，并从这个交易中抽取了第一个输出。这个输出中有一个锁定脚本，将 UTXO 锁定在 Alice 的公钥哈希上（一个 P2PKH 脚本）。区块链浏览器抽出了公钥哈希并使用 Base58Check 编码对它进行编码，来生成并表示代表这个公钥的比特币地址。

相似地，在右手边，区块链浏览器显示了两个输出；第一个是 Bob 的比特币地址，第二个是 Alice 的比特币地址（作为找零）。同样，为了创建这些比特币地址，区块链浏览器抽取每个输出的锁定脚本，将之识别为一个 P2PKH，并从中抽取 public-key-hash。最后，区块链浏览器使用 Base58Check 重新编码这个公钥来生成并显示比特币地址。

如果你点击 Bob 的比特币地址，比特币浏览器将会显示 <<the_balance_of_bobs_bitcoin_address>> 中的画面。

[[the_balance_of_bobs_bitcoin_address]]
.The balance of Bob's bitcoin address
image::images/mbc2_0608.png["The balance of Bob's bitcoin address"]

区块链浏览器显示了 Bob 的比特币地址的余额。但是在比特币系统中没有任何地方拥有“余额”的概念。这个值是向下面这样由比特币浏览器构建的。

为了构建“总收入”金额，区块链浏览器首先将会对比特币地址的 Base58Check 编码进行解码，来取得在这个地址中编码的 Bob 的 160 比特哈希公钥。然后，区块链浏览器会搜索交易数据，寻找在 P2PKH 锁定脚本中含有 Bob 的公钥哈希的输出。通过将所有的值相加，区块链浏览器可以生成收款总额。

构建当前余额（显示为“最终余额”）需要多一些工作。区块链浏览器持有一个分离的数据库，其中存储着当前未花费的输出，也就是 UTXO 集。为了维护这个数据库，区块链浏览器必须监视比特币网络，随着 UTXO 出现在未确认的交易中，实时地添加新建的 UTXO，并移除花费掉的 UTXO。这是一个复杂的处理，它依赖于跟踪传播中的交易，同时维护比特币网络的共识以确保跟踪者正确的链。有时候，区块链浏览器不同步，以至于它的 UTXO 集是不完整或不正确的。

从这个 UTXO 集中，区块链浏览器对所有引用 Bob 的公钥哈希的未花费输出的值求和，并生成显示给用户的 “最终余额”。

为了生成这一张带有两个“余额”的图片，区块链浏览器必须索引并搜索几十，上百，甚至上千上万的交易。

总而言之，通过钱包应用、区块链浏览器、以及其它比特币用户接口展示给用户的信息，通常是高级抽象的组合，是通过搜索不同的交易，检视它们的内容，并操作它们包含的数据衍生出来的。为了将这种类似于一个发送者给一个接受者的银行支票的比特币交易展示为简化的视图，这些应用必须抽象许多底层细节。它们几乎都集中关注最常见的交易：在每一个输出上带有 SIGHASH_ALL 签名的 P2PKH。因此，虽然比特币应用可以用易读的方式表示 80% 以上的交易，但是有时候它们会对不同寻常的交易一筹莫展。含有更复杂锁定脚本，或者不同 SIGHASH 标志，或者许多输入输出的交易，都会表明这些抽象的简单和脆弱。

每天，有数百笔不含 P2PKH 输出的交易在区块链上被确认。区块蓝浏览器经常用红色的警告消息显示它们无法解码地址。这个链接中含有最近的一些无法完全解码的“奇怪交易”。

正如我们将在下一章中看到的，它们不一定是奇怪的交易。它们是含有比常见的 P2PKH 更复杂的锁定脚本的交易。我们接下来就会学习如何解码并理解这些复杂的脚本，以及支持它们的应用。((("", startref="Thigher06")))((("", startref="alicesixtwo")))
